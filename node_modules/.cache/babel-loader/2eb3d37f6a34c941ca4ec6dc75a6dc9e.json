{"ast":null,"code":"import _objectSpread from \"C:\\\\superfarmclient\\\\SuperFarmClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\n// 인터셉터 정의\n// 인터셉터는 여러개 만들수 있다.\n\n/*\r\n    현재 만드는 인터셉터는 request 할때의 interceptor이다.\r\n    req = xmlhttprequest  javaScript에서 ajax headere를 가지고 있다.\r\n*/\n//                            [리덕스함수] [xmlhttprequest] -> header를 갖고있다.\nconst requestInterceptor = ({\n  getState\n}, req) => {\n  const _getState = getState(),\n        auth = _getState.auth;\n\n  const token = auth.token;\n  let headers = req.headers,\n      url = req.url;\n\n  if (token !== undefined && token !== null && url !== '/oauth/token') {\n    const access_token = token.access_token;\n\n    if (access_token !== undefined && access_token !== null) {\n      // 여기서 토큰을 갱신해도 안전함.\n      headers = _objectSpread({}, headers, {\n        'Authorization': \"Bearer \".concat(access_token)\n      });\n    }\n  }\n\n  console.log('requestInterceptor  headers', headers);\n  console.log('requestInterceptor  ...req ', req);\n  return _objectSpread({}, req, {\n    headers\n  });\n}; // 리턴.  request 도 있고 response도 있음.\n\n\nconst interceptors = {\n  request: [requestInterceptor]\n};\nexport default interceptors; // 토큰을 받는 시점에 토큰을 받은 시간(현재시간 타임스탬프)을 저장한다.\n// 토큰을 받은 시간(approvedTime+expires_in)과 현재시간을 비교하여 현재시간이 더 크면 토큰 소멸\n// 리프레시 토큰 리트라이에서 실패해도 갱신 가능.","map":{"version":3,"sources":["C:\\superfarmclient\\SuperFarmClient\\src\\util\\interceptors.js"],"names":["requestInterceptor","getState","req","auth","token","headers","url","undefined","access_token","console","log","interceptors","request"],"mappings":";;AAAA;AACA;;AACA;;;;AAIA;AACA,MAAMA,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAeC,GAAf,KAAuB;AAAA,oBAC7BD,QAAQ,EADqB;AAAA,QACtCE,IADsC,aACtCA,IADsC;;AAAA,QAEtCC,KAFsC,GAE5BD,IAF4B,CAEtCC,KAFsC;AAAA,MAGxCC,OAHwC,GAGvBH,GAHuB,CAGxCG,OAHwC;AAAA,MAG/BC,GAH+B,GAGvBJ,GAHuB,CAG/BI,GAH+B;;AAM9C,MAAIF,KAAK,KAAKG,SAAV,IAAuBH,KAAK,KAAK,IAAjC,IAAyCE,GAAG,KAAK,cAArD,EAAqE;AAAA,UACzDE,YADyD,GACxCJ,KADwC,CACzDI,YADyD;;AAGjE,QAAIA,YAAY,KAAKD,SAAjB,IAA8BC,YAAY,KAAK,IAAnD,EAAyD;AACrD;AACAH,MAAAA,OAAO,qBAAQA,OAAR;AAAiB,0CAA2BG,YAA3B;AAAjB,QAAP;AACH;AACJ;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CL,OAA3C;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CR,GAA3C;AACA,2BAAYA,GAAZ;AAAiBG,IAAAA;AAAjB;AACH,CAjBD,C,CAmBA;;;AACA,MAAMM,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CACLZ,kBADK;AADQ,CAArB;AAMA,eAAeW,YAAf,C,CACA;AACA;AACA","sourcesContent":["// 인터셉터 정의\r\n// 인터셉터는 여러개 만들수 있다.\r\n/*\r\n    현재 만드는 인터셉터는 request 할때의 interceptor이다.\r\n    req = xmlhttprequest  javaScript에서 ajax headere를 가지고 있다.\r\n*/\r\n//                            [리덕스함수] [xmlhttprequest] -> header를 갖고있다.\r\nconst requestInterceptor = ({ getState }, req) => {\r\n    const { auth } = getState();\r\n    const { token } = auth;\r\n    let { headers, url } = req;\r\n\r\n\r\n    if (token !== undefined && token !== null && url !== '/oauth/token') {\r\n        const { access_token } = token;\r\n\r\n        if (access_token !== undefined && access_token !== null) {\r\n            // 여기서 토큰을 갱신해도 안전함.\r\n            headers = { ...headers, 'Authorization': `Bearer ${access_token}` };\r\n        }\r\n    }\r\n    console.log('requestInterceptor  headers', headers)\r\n    console.log('requestInterceptor  ...req ', req)\r\n    return { ...req, headers }\r\n};\r\n\r\n// 리턴.  request 도 있고 response도 있음.\r\nconst interceptors = {\r\n    request: [\r\n        requestInterceptor\r\n    ]\r\n};\r\n\r\nexport default interceptors;\r\n// 토큰을 받는 시점에 토큰을 받은 시간(현재시간 타임스탬프)을 저장한다.\r\n// 토큰을 받은 시간(approvedTime+expires_in)과 현재시간을 비교하여 현재시간이 더 크면 토큰 소멸\r\n// 리프레시 토큰 리트라이에서 실패해도 갱신 가능."]},"metadata":{},"sourceType":"module"}