{"ast":null,"code":"var _jsxFileName = \"D:\\\\development\\\\SuperFarmClient\\\\SuperFarmClient\\\\src\\\\component\\\\board\\\\QnABoard.js\";\nimport React from 'react';\nimport { Actions } from '../../actions/index';\nimport { ActionTypes } from '../../contants';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'; // const qnaboardList = (productNum,size,page) => dispatch => {\n//   return dispatch(Actions.getQnABoard())\n//     .then(response => {\n//       if (response.type === ActionTypes.QNABOARD_SUCCESS) {\n//         console.log(' QnABoard Reading 성공')\n//       } else {\n//         return Promise.reject(response);\n//       }\n//     });\n// };\n\nconst writeQnABoard = qnaContent => dispatch => {\n  return dispatch(Actions.writeQnABoard()).then(response => {\n    if (response.type === ActionTypes.QNABOARD_SUCCESS) {\n      console.log('QnA READ SUCCESS');\n      return dispatch(Actions.getQnABoard());\n    } else {\n      return Promise.reject(response);\n    }\n  });\n};\n\nclass QnABoard extends React.Component {\n  constructor(props) {\n    super(props);\n    const qnaBoard = props.qnaBoard;\n    this.state = {\n      qnaBoard: qnaBoard // this.handleClick=this.handleClick.bind(this);\n\n    };\n    console.log('여기 실행 되나?', this.state);\n  } //   handleClick(e){\n  //     const {Clickitem}=this.state;\n  //     this.setState({\n  //       Clickitem:{\n  //         ...Clickitem,\n  //         isExpanded : !this.setState.isExpanded\n  //       }\n  //     })\n  //   }\n\n\n  componentWillMount() {\n    const loadqnaboardList = this.props.loadqnaboardList;\n    console.log(this.state, ' <<<<< willMount');\n    let productNum = 5;\n    let size = 10;\n    let page = 1;\n    console.log(loadqnaboardList, ' qnaboardList 실행');\n    loadqnaboardList(productNum, size, page);\n  }\n\n  _writeQnA() {//const { writeQnABoard } = this.props\n  }\n\n  render() {\n    console.log(this.props, '<----- props');\n    const qnaBoardList = this.props.qnaBoardList;\n    console.log(this.state, 'render');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"\\uB2F5\\uBCC0\\uC0C1\\uD0DC\"), React.createElement(\"div\", {\n      className: \"col-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"\\uC81C\\uBAA9\"), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"\\uC791\\uC131\\uC790\"), React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"\\uC791\\uC131\\uC77C\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => (console.log('mapDispatchToProps 실행중ㄴ'), {\n  loadqnaboardList: (productNum, size, page) => dispatch(Actions.loadqnaboardList(productNum, size, page)),\n  writeQnABoard: qnaContent => dispatch(writeQnABoard(qnaContent))\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(QnABoard));","map":{"version":3,"sources":["D:\\development\\SuperFarmClient\\SuperFarmClient\\src\\component\\board\\QnABoard.js"],"names":["React","Actions","ActionTypes","connect","withRouter","writeQnABoard","qnaContent","dispatch","then","response","type","QNABOARD_SUCCESS","console","log","getQnABoard","Promise","reject","QnABoard","Component","constructor","props","qnaBoard","state","componentWillMount","loadqnaboardList","productNum","size","page","_writeQnA","render","qnaBoardList","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Actions } from '../../actions/index';\r\nimport { ActionTypes } from '../../contants';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n// const qnaboardList = (productNum,size,page) => dispatch => {\r\n//   return dispatch(Actions.getQnABoard())\r\n//     .then(response => {\r\n//       if (response.type === ActionTypes.QNABOARD_SUCCESS) {\r\n//         console.log(' QnABoard Reading 성공')\r\n//       } else {\r\n//         return Promise.reject(response);\r\n//       }\r\n//     });\r\n// };\r\n\r\n\r\nconst writeQnABoard = (qnaContent) => dispatch => {\r\n  return dispatch(Actions.writeQnABoard())\r\n    .then(response => {\r\n      if (response.type === ActionTypes.QNABOARD_SUCCESS) {\r\n        console.log('QnA READ SUCCESS')\r\n        return dispatch(Actions.getQnABoard())\r\n      } else {\r\n        return Promise.reject(response);\r\n      }\r\n    });\r\n};\r\n\r\nclass QnABoard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    const { qnaBoard } = props;\r\n    this.state = {\r\n      qnaBoard: qnaBoard\r\n    }\r\n    // this.handleClick=this.handleClick.bind(this);\r\n    console.log('여기 실행 되나?', this.state)\r\n  }\r\n\r\n  //   handleClick(e){\r\n  //     const {Clickitem}=this.state;\r\n  //     this.setState({\r\n  //       Clickitem:{\r\n  //         ...Clickitem,\r\n  //         isExpanded : !this.setState.isExpanded\r\n  //       }\r\n  //     })\r\n  //   }\r\n\r\n  componentWillMount() {\r\n    const { loadqnaboardList } = this.props;\r\n    console.log(this.state, ' <<<<< willMount')\r\n    let productNum = 5\r\n    let size = 10\r\n    let page = 1\r\n    console.log(loadqnaboardList,' qnaboardList 실행')\r\n    loadqnaboardList(productNum,size,page);\r\n    \r\n  }\r\n\r\n  _writeQnA() {\r\n    //const { writeQnABoard } = this.props\r\n\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props,'<----- props')\r\n    const { qnaBoardList } = this.props;\r\n    console.log(this.state, 'render');\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">답변상태</div>\r\n          <div className=\"col-7\">제목</div>\r\n          <div className=\"col-1\">작성자</div>\r\n          <div className=\"col-2\">작성일</div>\r\n        </div>\r\n        {/* {qnaBoardList.map((item) => (\r\n          <div>\r\n            <div className=\"row\">\r\n              <div className=\"col\">{item.questionBoardStatus}</div>\r\n              <div className=\"col-7\">\r\n                <details>\r\n                  <summary>{item.questionBoardContent}</summary>\r\n                  {item.questionAnswer.map((answer) => (\r\n                    <div className=\"row\" hidden={item.isExpanded}>\r\n                      <div className=\"col-2\">{answer.answerWriter}</div>\r\n                      <div className=\"col-10\">{answer.answerContent}</div>\r\n                    </div>\r\n                  ))}\r\n                </details>\r\n              </div>\r\n              <div>\r\n                <input type=\"textarea\"></input>\r\n                <input type=\"botton\" value=\"작성\"></input>\r\n              </div>\r\n              <div className=\"col-1\">{item.user.username}</div>\r\n              <div className=\"col-2\">{item.questionBoardRegdate}</div>\r\n            </div>\r\n          </div>\r\n        ))} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => (console.log('mapDispatchToProps 실행중ㄴ'),{\r\n  \r\n  loadqnaboardList: (productNum,size,page) => dispatch(Actions.loadqnaboardList(productNum,size,page)),\r\n  writeQnABoard: (qnaContent) => dispatch(writeQnABoard(qnaContent))\r\n});\r\n\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(QnABoard));"]},"metadata":{},"sourceType":"module"}