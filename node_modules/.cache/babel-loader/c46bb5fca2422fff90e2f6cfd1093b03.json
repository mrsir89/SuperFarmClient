{"ast":null,"code":"import { getActionTypes } from 'redux-axios-middleware';\nimport { Actions } from '../actions';\n\nconst onError = ({\n  action,\n  next,\n  error\n}, options) => {\n  let errorObject;\n\n  if (!error.response) {\n    errorObject = {\n      data: error.message,\n      status: 0\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('HTTP Failur in Axzios', error);\n    }\n  } else {\n    errorObject = error;\n  }\n\n  const nextAction = {\n    // Redux에 전달됨.\n    type: getActionTypes(action, options)[2],\n    error: errorObject,\n    meta: {\n      // login 실패하면 action >>> login이 들어간다.\n      previousAction: action\n    }\n  };\n  next(nextAction);\n  return nextAction;\n};\n\nconst onErrorHandler = ({\n  action,\n  next,\n  error,\n  getState,\n  dispatch\n}, options) => {\n  console.log('onErrorHandler', error);\n\n  if (error.response === undefined || error.response.status === 401) {\n    const _getState = getState(),\n          auth = _getState.auth;\n\n    const retryCount = auth.retryCount,\n          token = auth.token;\n\n    if (retryCount === 3 || token === undefined || token === null) {\n      return dispatch(Actions.logout()); // logout 실행 \n    } else {\n      return dispatch(Actions.refreshToken(token.refresh_token)) // 만약 To-do 패치 같은것을 하면 마지막 액션도 실행한다.\n      // if(response.type==Actiontypes.REFRESH_TOKEN_SUCCESS) 생략 되었다.\n      .then(response => dispatch(action));\n    }\n  }\n};\n\nexport default onErrorHandler;","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\util\\error.handler.js"],"names":["getActionTypes","Actions","onError","action","next","error","options","errorObject","response","data","message","status","process","env","NODE_ENV","console","log","nextAction","type","meta","previousAction","onErrorHandler","getState","dispatch","undefined","auth","retryCount","token","logout","refreshToken","refresh_token","then"],"mappings":"AAAA,SAASA,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAGA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAD,EAA0BC,OAA1B,KAAsC;AAClD,MAAIC,WAAJ;;AACA,MAAI,CAACF,KAAK,CAACG,QAAX,EAAqB;AACjBD,IAAAA,WAAW,GAAG;AACVE,MAAAA,IAAI,EAAEJ,KAAK,CAACK,OADF;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAd;;AAIA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCX,KAArC;AACH;AACJ,GARD,MAQO;AACHE,IAAAA,WAAW,GAAGF,KAAd;AACH;;AAED,QAAMY,UAAU,GAAG;AAAE;AACjBC,IAAAA,IAAI,EAAElB,cAAc,CAACG,MAAD,EAASG,OAAT,CAAd,CAAgC,CAAhC,CADS;AAEfD,IAAAA,KAAK,EAAEE,WAFQ;AAGfY,IAAAA,IAAI,EAAE;AACF;AACAC,MAAAA,cAAc,EAAEjB;AAFd;AAHS,GAAnB;AASAC,EAAAA,IAAI,CAACa,UAAD,CAAJ;AACA,SAAOA,UAAP;AACH,CAzBD;;AA2BA,MAAMI,cAAc,GAAG,CAAC;AAAElB,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,KAAhB;AAAuBiB,EAAAA,QAAvB;AAAiCC,EAAAA;AAAjC,CAAD,EAA8CjB,OAA9C,KAA0D;AAE7ES,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BX,KAA9B;;AACA,MAAIA,KAAK,CAACG,QAAN,KAAmBgB,SAAnB,IAAgCnB,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA9D,EAAmE;AAAA,sBAC9CW,QAAQ,EADsC;AAAA,UACvDG,IADuD,aACvDA,IADuD;;AAAA,UAEvDC,UAFuD,GAEjCD,IAFiC,CAEvDC,UAFuD;AAAA,UAE3CC,KAF2C,GAEjCF,IAFiC,CAE3CE,KAF2C;;AAI/D,QAAID,UAAU,KAAK,CAAf,IAAoBC,KAAK,KAAKH,SAA9B,IAA2CG,KAAK,KAAK,IAAzD,EAA+D;AAC3D,aAAOJ,QAAQ,CAACtB,OAAO,CAAC2B,MAAR,EAAD,CAAf,CAD2D,CACzB;AACrC,KAFD,MAEO;AACH,aAAOL,QAAQ,CAACtB,OAAO,CAAC4B,YAAR,CAAqBF,KAAK,CAACG,aAA3B,CAAD,CAAR,CACH;AACA;AAFG,OAGFC,IAHE,CAGGvB,QAAQ,IAAIe,QAAQ,CAACpB,MAAD,CAHvB,CAAP;AAIH;AACJ;AACJ,CAhBD;;AAkBA,eAAekB,cAAf","sourcesContent":["import { getActionTypes } from 'redux-axios-middleware';\nimport { Actions } from '../actions';\n\n\nconst onError = ({ action, next, error }, options) => {\n    let errorObject;\n    if (!error.response) {\n        errorObject = {\n            data: error.message,\n            status: 0\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            console.log('HTTP Failur in Axzios', error);\n        }\n    } else {\n        errorObject = error;\n    }\n\n    const nextAction = { // Redux에 전달됨.\n        type: getActionTypes(action, options)[2],\n        error: errorObject,\n        meta: {\n            // login 실패하면 action >>> login이 들어간다.\n            previousAction: action\n        }\n    };\n\n    next(nextAction);\n    return nextAction;\n};\n\nconst onErrorHandler = ({ action, next, error, getState, dispatch }, options) => {\n\n    console.log('onErrorHandler', error);\n    if (error.response === undefined || error.response.status === 401) {\n        const { auth } = getState();\n        const { retryCount, token } = auth;\n\n        if (retryCount === 3 || token === undefined || token === null) {\n            return dispatch(Actions.logout());// logout 실행 \n        } else {\n            return dispatch(Actions.refreshToken(token.refresh_token))\n                // 만약 To-do 패치 같은것을 하면 마지막 액션도 실행한다.\n                // if(response.type==Actiontypes.REFRESH_TOKEN_SUCCESS) 생략 되었다.\n                .then(response => dispatch(action));       \n        }\n    }\n}\n\nexport default onErrorHandler;"]},"metadata":{},"sourceType":"module"}