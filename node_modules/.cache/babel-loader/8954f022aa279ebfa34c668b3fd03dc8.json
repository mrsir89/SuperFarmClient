{"ast":null,"code":"import { ActionTypes } from '../contants'; // React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\n// 초기 페이지 설정 값\n\nconst initBoardListsize = 10;\nconst initBoardListPage = 1;\n\nconst getClientToken = () => {\n  const formData = new FormData();\n  formData.append('grant_type', 'client_credentials');\n  console.log('Actions의 getClientToken 발급 받는다. ');\n  return {\n    type: ActionTypes.GET_TOKEN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n}; //////////////////////////////////////////////\n//           회원 가입 \n\n/**\r\n * 회원가입 \r\n * @param {singupCustomer} signupCustomer \r\n * @Return User<Customer>\r\n */\n\n\nconst signup = (signupCustomer, history) => {\n  console.log(signupCustomer, ' 여기는 signup 안쪽');\n  return {\n    type: ActionTypes.SIGNUP,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(signupCustomer)\n      }\n    }\n  };\n};\n/**\r\n * id 중복 체크\r\n * @param String id\r\n * @return true or notfoud \r\n */\n\n\nconst idCheck = id => {\n  console.log('idCheck 실행 ', id);\n  const formData = new FormData();\n  formData.append('id', id);\n  return {\n    type: ActionTypes.IDCHECK,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup/idCheck',\n        data: formData\n      }\n    }\n  };\n};\n\nconst emailCheck = email => {\n  const formData = new FormData();\n  formData.append('email', email);\n  return {\n    type: ActionTypes.EMAILCHECK,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup/emailCheck',\n        data: formData\n      }\n    }\n  };\n}; //////////////////////////////////////////////////////\n//        로 그 인 \n\n\nconst login = (customerId, password) => {\n  const formData = new FormData();\n  formData.append('grant_type', 'password');\n  formData.append('username', customerId);\n  formData.append('password', password);\n  console.log(customerId, 'ID ', password, ' Password');\n  return {\n    type: ActionTypes.LOGIN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n};\n\nconst getUserMe = () => {\n  return {\n    type: ActionTypes.GET_USERME,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/users/me'\n      }\n    }\n  };\n};\n\nconst logout = () => ({\n  type: ActionTypes.LOGOUT\n});\n/**\r\n * @author 심인선\r\n * @param {*} writeQnA \r\n */\n/////////////////////////////////////////////////////////////////\n///          notice board\n\n\nconst loadNoticeBoard = () => {\n  const formData = new FormData();\n  console.log('Action NoticeBoard 실행');\n  return {\n    type: ActionTypes.LOAD_NOTICEBOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/notice',\n        data: formData\n      }\n    }\n  };\n}; /////////////////////////////////////////////////////////////////\n/////////// QnA Board ///////////////////////////////////////\n\n\nconst writeQnABoard = writeQnA => {\n  console.log('writeQnABoard');\n  return {\n    type: ActionTypes.WRITE_QNABOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/write/question',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(writeQnA)\n      }\n    }\n  };\n}; //QnABoard productBoardNum에 맞게 불러 오기\n\n\nconst loadqnaboardList = (productNum, size, page) => {\n  const formdata = new FormData();\n  formdata.append('productNum', 5);\n  formdata.append('size', size);\n  formdata.append('page', page);\n  console.log('Action loadQnABoard 실행');\n  console.log('size', size, ' page ', page);\n  return {\n    type: ActionTypes.LOAD_QNABOARDLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/product',\n        data: formdata\n      }\n    }\n  };\n}; //QnABoard 내용수정\n\n\nconst editQnABoard = editQnABoard => {\n  console.log(' edit QnABoard Action 실행');\n  return {\n    type: ActionTypes.EDIT_QNABOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/update/question',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(editQnABoard)\n      }\n    }\n  };\n}; // QnABOARD 작성\n\n\nconst deleteQnABoard = deleteQnABoard => {\n  console.log(' delete QnABoard action 실행 ');\n  return {\n    type: ActionTypes.DELETE_QNABOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/delete/question',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(deleteQnABoard)\n      }\n    }\n  };\n}; // QnABOARD 댓글 작성 \n\n\nconst writeAnswer = questionAnswer => {\n  console.log(' writeAnswer QnABoard action 실행');\n  return {\n    type: ActionTypes.WRITE_QNABOARDANSWER,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/write/answer',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(questionAnswer)\n      }\n    }\n  };\n}; //QnABoard 댓글 soft삭제\n\n\nconst deleteAnswer = questionAnswer => {\n  console.log(' deleteAnswer QnABoard action 실행');\n  return {\n    type: ActionTypes.DELETE_QNABOARDANSWER,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/delete/answer',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(questionAnswer)\n      }\n    }\n  };\n}; /////////////////////////////////////////////////////////////////\n/////////// Review Board ///////////////////////////////////////\n// 리뷰 추가\n\n\nconst addReview = reviewBoard => {\n  console.log('Action AddReview 실행 ');\n  return {\n    type: ActionTypes.ADD_REVIEW,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/review/write',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(reviewBoard)\n      }\n    }\n  };\n}; // 리뷰 삭제\n\n\nconst removeReview = reviewBoardNum => {\n  console.log('removieReviewsd');\n  return {\n    type: ActionTypes.REMOVE_REVIEW,\n    payload: {\n      request: {\n        method: 'DELETE',\n        url: \"/review/delete\".concat(reviewBoardNum)\n      }\n    }\n  };\n}; // 리뷰 가져오기\n\n\nconst getReviews = (type, id, size = initBoardListsize, page = initBoardListPage) => {\n  const formData = new FormData();\n  type = 'productBoard';\n  var url = '/review/product';\n  formData.append('size', size);\n  formData.append('page', page);\n  formData.append('productBoardNum', 5);\n  console.log('Action LOAD_REVIEWS');\n\n  if (type == 'productBoard') {\n    formData.append('productBoardNum', 5);\n    url = '/review/product';\n  }\n\n  if (type == 'user') {\n    formData.append('userId', id);\n    url = '/review/userId';\n  }\n\n  console.log('size', size, 'page', page, 'id', id);\n  return {\n    type: ActionTypes.LOAD_REVIEWS,\n    payload: {\n      request: {\n        method: 'POST',\n        url: url,\n        data: formData\n      }\n    }\n  };\n};\n\nconst uploadFileReview = (reviewBoardNum, file) => {\n  console.log('uploadFileReivew Start ');\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('reviewBoardNum', reviewBoardNum);\n  return {\n    type: ActionTypes.UPLOADFILEREVIEW,\n    payload: {\n      request: {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        method: 'POST',\n        url: '/storage/file',\n        data: formData\n      }\n    }\n  };\n}; /////////////////////////////////////////////////////////////////\n///////////     Cart      ///////////////////////////////////////\n// 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\n// const addCart = (item) => ({\n//   type: ActionTypes.ADD_CART,\n//   item\n// });\n// 0814 장바구니 추가 (user)\n// userNum,\n\n\nconst addCart = cartModel => {\n  // console.log (\"userNum 넘어옴?? >>>> \", userNum)\n  console.log(\"cartModel 넘어옴?? >>>> \", cartModel);\n  return {\n    type: ActionTypes.ADD_CART,\n    payload: {\n      request: {\n        method: 'POST',\n        url: \"/cart/add\",\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(cartModel)\n      }\n    }\n  };\n}; // 0814 장바구니 불러오기 (user)\n\n\nconst getCartByUser = userNum => {\n  console.log('getCartByUser 실행 ', userNum);\n  const formData = new FormData();\n  formData.append('userNum', userNum);\n  return {\n    type: ActionTypes.GET_CART,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/cart',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: formData\n      }\n    }\n  };\n}; /////////////////////////////////////////////////////////////////\n///////////   productBoard   ////////////////////////////////////\n// 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \n\n\nconst loadProductList = (type, id) => {\n  const formData = new FormData();\n  let url = '/product/lower';\n\n  if (type === 'lower') {\n    console.log('lower 확인 ,', type, id);\n    url = '/product/lower';\n    formData.append('lower', id);\n  } else if (type === 'search') {\n    url = '/product/search';\n    formData.append('search', id);\n  }\n\n  console.log('loadProductList');\n  return {\n    type: ActionTypes.LOAD_PRODUCTLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: url,\n        data: formData\n      }\n    }\n  };\n};\n\nconst loadProductDetails = productBoardNum => {\n  const formData = new FormData();\n  formData.append('num', productBoardNum);\n  return {\n    type: ActionTypes.LOAD_PRODUCTDETAIL,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/product/productDetail',\n        data: formData\n      }\n    }\n  };\n}; /////////////////////////////////////////////////////////////////\n///////////   Category       ////////////////////////////////////\n// 카테고리 DB에서 가져오는 action 추가 \n\n\nconst getCategories = () => {\n  return {\n    type: ActionTypes.GET_CATEGORIES,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/category'\n      }\n    }\n  };\n}; //////////////////////////////////////////////////////////\n///        비동기 처리를 위한 Action\n\n\nconst asynAction = () => {\n  // window.setInterval(()=>{}, 100);\n  return {\n    type: ActionTypes.ASNYCACTION,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup/asyncAction'\n      }\n    }\n  };\n}; ///////////////////////////////////////////////////////////\n////        KakaoPay \n\n\nconst kakaoPayReady = () => {\n  const formData = new FormData();\n  return {\n    type: ActionTypes.KAKAOPAYREADY,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/kakaoPay',\n        data: formData\n      }\n    }\n  };\n};\n\nexport const Actions = {\n  signup,\n  emailCheck,\n  idCheck,\n  getUserMe,\n  login,\n  logout,\n  getClientToken,\n  writeQnABoard,\n  addCart,\n  loadProductList,\n  loadProductDetails,\n  getCategories,\n  getCartByUser,\n  loadqnaboardList,\n  writeQnABoard,\n  editQnABoard,\n  deleteQnABoard,\n  loadNoticeBoard,\n  writeAnswer,\n  deleteAnswer,\n  getReviews,\n  removeReview,\n  addReview,\n  uploadFileReview,\n  asynAction,\n  kakaoPayReady\n};","map":{"version":3,"sources":["C:\\SuperFarmClient\\src\\actions\\index.js"],"names":["ActionTypes","initBoardListsize","initBoardListPage","getClientToken","formData","FormData","append","console","log","type","GET_TOKEN","payload","request","method","url","data","signup","signupCustomer","history","SIGNUP","headers","JSON","stringify","idCheck","id","IDCHECK","emailCheck","email","EMAILCHECK","login","customerId","password","LOGIN","getUserMe","GET_USERME","logout","LOGOUT","loadNoticeBoard","LOAD_NOTICEBOARD","writeQnABoard","writeQnA","WRITE_QNABOARD","loadqnaboardList","productNum","size","page","formdata","LOAD_QNABOARDLIST","editQnABoard","EDIT_QNABOARD","deleteQnABoard","DELETE_QNABOARD","writeAnswer","questionAnswer","WRITE_QNABOARDANSWER","deleteAnswer","DELETE_QNABOARDANSWER","addReview","reviewBoard","ADD_REVIEW","removeReview","reviewBoardNum","REMOVE_REVIEW","getReviews","LOAD_REVIEWS","uploadFileReview","file","UPLOADFILEREVIEW","addCart","cartModel","ADD_CART","getCartByUser","userNum","GET_CART","loadProductList","LOAD_PRODUCTLIST","loadProductDetails","productBoardNum","LOAD_PRODUCTDETAIL","getCategories","GET_CATEGORIES","asynAction","ASNYCACTION","kakaoPayReady","KAKAOPAYREADY","Actions"],"mappings":"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","sourcesContent":["import { ActionTypes } from '../contants';\r\n// React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\r\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\r\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\r\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\r\n\r\n\r\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\r\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\r\n\r\n\r\n// 초기 페이지 설정 값\r\n\r\nconst initBoardListsize = 10\r\nconst initBoardListPage = 1\r\n\r\n\r\nconst getClientToken = () => {\r\n  const formData = new FormData();\r\n  formData.append('grant_type', 'client_credentials');\r\n  console.log('Actions의 getClientToken 발급 받는다. ');\r\n  return ({\r\n    type: ActionTypes.GET_TOKEN,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/oauth/token',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n\r\n//////////////////////////////////////////////\r\n//           회원 가입 \r\n\r\n/**\r\n * 회원가입 \r\n * @param {singupCustomer} signupCustomer \r\n * @Return User<Customer>\r\n */\r\nconst signup = (signupCustomer,history) => {\r\n  console.log(signupCustomer, ' 여기는 signup 안쪽')\r\n\r\n  return ({\r\n    type: ActionTypes.SIGNUP,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/signup',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(signupCustomer)\r\n      }\r\n    }\r\n  }\r\n  );\r\n};\r\n\r\n/**\r\n * id 중복 체크\r\n * @param String id\r\n * @return true or notfoud \r\n */\r\nconst idCheck = (id) => {\r\n  console.log('idCheck 실행 ', id)\r\n\r\n  const formData = new FormData();\r\n  formData.append('id', id);\r\n  return ({\r\n    type: ActionTypes.IDCHECK,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/signup/idCheck',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst emailCheck = (email) => {\r\n  const formData = new FormData();\r\n  formData.append('email', email);\r\n  return ({\r\n    type: ActionTypes.EMAILCHECK,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/signup/emailCheck',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n//        로 그 인 \r\n\r\n\r\nconst login = (customerId, password) => {\r\n  const formData = new FormData();\r\n  formData.append('grant_type', 'password');\r\n  formData.append('username', customerId);\r\n  formData.append('password', password);\r\n  console.log(customerId, 'ID ', password, ' Password')\r\n  return ({\r\n    type: ActionTypes.LOGIN,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/oauth/token',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst getUserMe = () => {\r\n  return ({\r\n    type: ActionTypes.GET_USERME,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/users/me'\r\n\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst logout = () => ({\r\n  type: ActionTypes.LOGOUT\r\n})\r\n\r\n/**\r\n * @author 심인선\r\n * @param {*} writeQnA \r\n */\r\n/////////////////////////////////////////////////////////////////\r\n///          notice board\r\n\r\nconst loadNoticeBoard = ()=>{\r\n  const formData = new FormData();\r\n  console.log('Action NoticeBoard 실행')\r\n  return({\r\n    type:ActionTypes.LOAD_NOTICEBOARD,\r\n    payload:{\r\n      request:{\r\n        method:'POST',\r\n        url:'/notice',\r\n        data:formData\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n/////////// QnA Board ///////////////////////////////////////\r\n\r\nconst writeQnABoard = (writeQnA) => {\r\n  console.log('writeQnABoard')\r\n  return ({\r\n    type: ActionTypes.WRITE_QNABOARD,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/question/write/question',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(writeQnA)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n//QnABoard productBoardNum에 맞게 불러 오기\r\nconst loadqnaboardList = (productNum, size, page) => {\r\n  const formdata = new FormData();\r\n  formdata.append('productNum', 5);\r\n  formdata.append('size', size);\r\n  formdata.append('page', page);\r\n  console.log('Action loadQnABoard 실행')\r\n  console.log('size', size, ' page ', page)\r\n  return ({\r\n    type: ActionTypes.LOAD_QNABOARDLIST,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/question/product',\r\n        data: formdata\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n//QnABoard 내용수정\r\nconst editQnABoard = (editQnABoard) => {\r\n  console.log(' edit QnABoard Action 실행')\r\n  return ({\r\n    type: ActionTypes.EDIT_QNABOARD,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/update/question',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(editQnABoard)\r\n      }\r\n    }\r\n  })\r\n}\r\n// QnABOARD 작성\r\nconst deleteQnABoard = (deleteQnABoard) => {\r\n  console.log(' delete QnABoard action 실행 ')\r\n  return ({\r\n    type: ActionTypes.DELETE_QNABOARD,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/question/delete/question',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(deleteQnABoard)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// QnABOARD 댓글 작성 \r\nconst writeAnswer = (questionAnswer) => {\r\n  console.log(' writeAnswer QnABoard action 실행')\r\n  return ({\r\n    type: ActionTypes.WRITE_QNABOARDANSWER,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/question/write/answer',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(questionAnswer)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n//QnABoard 댓글 soft삭제\r\nconst deleteAnswer = (questionAnswer) => {\r\n  console.log(' deleteAnswer QnABoard action 실행')\r\n  return ({\r\n    type: ActionTypes.DELETE_QNABOARDANSWER,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/question/delete/answer',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(questionAnswer)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n/////////// Review Board ///////////////////////////////////////\r\n\r\n// 리뷰 추가\r\nconst addReview = (reviewBoard) => {\r\n\r\n  console.log('Action AddReview 실행 ')\r\n  return ({\r\n    type: ActionTypes.ADD_REVIEW,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/review/write',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(reviewBoard)\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// 리뷰 삭제\r\nconst removeReview = (reviewBoardNum) => {\r\n  console.log('removieReviewsd')\r\n  return ({\r\n    type: ActionTypes.REMOVE_REVIEW,\r\n    payload: {\r\n      request: {\r\n        method: 'DELETE',\r\n        url: `/review/delete${reviewBoardNum}`\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// 리뷰 가져오기\r\nconst getReviews = (type, id, size = initBoardListsize,\r\n  page = initBoardListPage) => {\r\n  const formData = new FormData();\r\n  type = 'productBoard'\r\n  var url = '/review/product';\r\n  formData.append('size', size)\r\n  formData.append('page', page)\r\n  formData.append('productBoardNum', 5)\r\n  console.log('Action LOAD_REVIEWS')\r\n\r\n  if (type == 'productBoard') {\r\n    formData.append('productBoardNum', 5)\r\n    url = '/review/product';\r\n  }\r\n  if (type == 'user') {\r\n    formData.append('userId', id)\r\n    url = '/review/userId'\r\n  }\r\n  console.log('size', size, 'page', page, 'id', id)\r\n  return ({\r\n    type: ActionTypes.LOAD_REVIEWS,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: url,\r\n        data: formData,\r\n      },\r\n\r\n    }\r\n  })\r\n};\r\n\r\nconst uploadFileReview = (reviewBoardNum, file) => {\r\n  console.log('uploadFileReivew Start ')\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('reviewBoardNum', reviewBoardNum)\r\n  return ({\r\n    type: ActionTypes.UPLOADFILEREVIEW,\r\n\r\n    payload: {\r\n      request: {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        method: 'POST',\r\n        url: '/storage/file',\r\n        data: formData,\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n///////////     Cart      ///////////////////////////////////////\r\n\r\n\r\n// 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\r\n// const addCart = (item) => ({\r\n//   type: ActionTypes.ADD_CART,\r\n//   item\r\n// });\r\n\r\n// 0814 장바구니 추가 (user)\r\n// userNum,\r\nconst addCart = (cartModel) => {\r\n  // console.log (\"userNum 넘어옴?? >>>> \", userNum)\r\n  console.log(\"cartModel 넘어옴?? >>>> \", cartModel)\r\n\r\n  return ({\r\n    type: ActionTypes.ADD_CART,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: `/cart/add`,\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(cartModel)\r\n      }\r\n    }\r\n  })\r\n\r\n};\r\n\r\n// 0814 장바구니 불러오기 (user)\r\nconst getCartByUser = (userNum) => {\r\n  console.log('getCartByUser 실행 ', userNum)\r\n  const formData = new FormData();\r\n  formData.append('userNum', userNum)\r\n  return ({\r\n    type: ActionTypes.GET_CART,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/cart',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: formData,\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n///////////   productBoard   ////////////////////////////////////\r\n\r\n// 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \r\nconst loadProductList = (type, id) => {\r\n\r\n  const formData = new FormData();\r\n  let url = '/product/lower'\r\n\r\n  if (type === 'lower') {\r\n    console.log('lower 확인 ,', type, id)\r\n    url = '/product/lower';\r\n    formData.append('lower', id);\r\n\r\n  } else if (type === 'search') {\r\n    url = '/product/search'\r\n    formData.append('search', id)\r\n\r\n  }\r\n  console.log('loadProductList')\r\n\r\n  return ({\r\n    type: ActionTypes.LOAD_PRODUCTLIST,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: url,\r\n        data: formData\r\n      },\r\n    }\r\n  })\r\n};\r\n\r\n\r\nconst loadProductDetails = (productBoardNum) => {\r\n\r\n  const formData = new FormData();\r\n  formData.append('num', productBoardNum);\r\n  return ({\r\n    type: ActionTypes.LOAD_PRODUCTDETAIL,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/product/productDetail',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/////////////////////////////////////////////////////////////////\r\n///////////   Category       ////////////////////////////////////\r\n\r\n\r\n// 카테고리 DB에서 가져오는 action 추가 \r\nconst getCategories = () => {\r\n  return ({\r\n    type: ActionTypes.GET_CATEGORIES,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/category'\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n//////////////////////////////////////////////////////////\r\n///        비동기 처리를 위한 Action\r\nconst asynAction = () => {\r\n  // window.setInterval(()=>{}, 100);\r\n  return {\r\n    type: ActionTypes.ASNYCACTION,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/signup/asyncAction'\r\n      }\r\n    }\r\n  }\r\n}\r\n///////////////////////////////////////////////////////////\r\n////        KakaoPay \r\n\r\nconst kakaoPayReady =() =>{\r\n  const formData = new FormData();\r\n  return{\r\n    type:ActionTypes.KAKAOPAYREADY,\r\n    payload:{\r\n      request:{\r\n        method:'POST',\r\n        url:'/kakaoPay',\r\n        data:formData\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const Actions = {\r\n\r\n  signup, emailCheck, idCheck, getUserMe,\r\n  login, logout, getClientToken,\r\n  writeQnABoard,\r\n  addCart,\r\n  loadProductList, loadProductDetails,\r\n  getCategories, getCartByUser,\r\n  loadqnaboardList, writeQnABoard, editQnABoard, deleteQnABoard,loadNoticeBoard,\r\n  writeAnswer, deleteAnswer,\r\n  getReviews, removeReview, addReview, uploadFileReview,\r\n  asynAction, kakaoPayReady\r\n\r\n};"]},"metadata":{},"sourceType":"module"}