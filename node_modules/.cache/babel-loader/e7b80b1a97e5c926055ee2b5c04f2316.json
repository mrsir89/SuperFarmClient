{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\SuperFarmClientTemp\\\\SuperFarmClient\\\\src\\\\index.js\";\n// 8/16 sj\n// (userId)를 바탕으로 장바구니 추가/ 불러오기 기능 구현\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootReducers from './reducers';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport axios from 'axios'; // 추가사항\n\nimport axiosMiddleware from 'redux-axios-middleware'; // 추가사항\n\nimport { StateLoader, interceptors, onErrorHandler } from './util';\nimport App from './App';\nimport NaviBar from './component/board/NaviBar'; // import * as serviceWorker from './serviceWorker';\n// 여기서만 선언 endpoint가 oauth가 아니면 override 할거\n\nconst clientId = 'test01';\nconst clientSecret = 'test01'; //Axios client 생성// 왜 여기서 생성을 했을 까요?\n\nconst client = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Authorization': \"Basic \".concat(btoa(\"\".concat(clientId, \":\").concat(clientSecret))),\n    'Cache-Control': 'no-cache'\n  },\n  responseType: 'json'\n}); // config 설정\n\nconst middlewareConfig = {\n  // authoprization을 bearer 토큰으로 바꿔주기 위한 인터셉터\n  interceptors,\n  // 401에러를 처리하여 토큰을 자동으로 갱신한 후, 이전 에 실패한 액션(api call)을 다시 수행  / 실행한 경우 다시 실행 \n  // 에러가 나면 무조건 실행 reqeust 나 respone 둘중에 처리해도 된다.\n  // 하지만 인터셉터랑 핸들러랑 차이가 있다. /\n  // 기본적인 onError 핸들러는 로그인시 실패 하면 /login_fail 또는 login_suscess 두가지중 하나로 온다.\n  onError: onErrorHandler\n};\nconst logger = createLogger({\n  collapsed: true\n});\nconst stateLoader = new StateLoader(); // Store\n// Global영역에서 애플리케이션의 State와 비즈니스로직을 가지고 있고 있는 주체를 Store라고 한다.\n// State를 Global한 영역에서 관리한다는 말은 즉 State관리 라이브러리 사용의 목적 중 한가지 이다.\n// Redux에서는 State와 State를 핸들링하는 비즈니스로직을 가지고 있는 Reducer, Action등을 포함하는 의미.\n\nconst store = createStore(rootReducers, stateLoader.loadState(), applyMiddleware(axiosMiddleware(client, middlewareConfig), logger, thunk));\nstore.subscribe(() => {\n  stateLoader.saveState(store.getState());\n});\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\index.js"],"names":["React","ReactDOM","Provider","applyMiddleware","createStore","createLogger","thunk","rootReducers","BrowserRouter","Router","axios","axiosMiddleware","StateLoader","interceptors","onErrorHandler","App","NaviBar","clientId","clientSecret","client","create","baseURL","headers","btoa","responseType","middlewareConfig","onError","logger","collapsed","stateLoader","store","loadState","subscribe","saveState","getState","render","document","getElementById"],"mappings":";AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,YAAP,MAAyB,YAAzB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,OAAOC,eAAP,MAA4B,wBAA5B,C,CAAsD;;AACtD,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,cAApC,QAA0D,QAA1D;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AAEA;;AACA,MAAMC,QAAQ,GAAG,QAAjB;AACA,MAAMC,YAAY,GAAG,QAArB,C,CAEA;;AACA,MAAMC,MAAM,GAAGT,KAAK,CAACU,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,uBADiB;AAE1BC,EAAAA,OAAO,EAAE;AACP,qCAA0BC,IAAI,WAAIN,QAAJ,cAAgBC,YAAhB,EAA9B,CADO;AAEP,qBAAiB;AAFV,GAFiB;AAM1BM,EAAAA,YAAY,EAAE;AANY,CAAb,CAAf,C,CASA;;AACA,MAAMC,gBAAgB,GAAG;AACvB;AACAZ,EAAAA,YAFuB;AAGvB;AACA;AACA;AACA;AACAa,EAAAA,OAAO,EAAEZ;AAPc,CAAzB;AAUA,MAAMa,MAAM,GAAGtB,YAAY,CAAC;AAC1BuB,EAAAA,SAAS,EAAE;AADe,CAAD,CAA3B;AAIA,MAAMC,WAAW,GAAG,IAAIjB,WAAJ,EAApB,C,CAGA;AACA;AACA;AACA;;AACA,MAAMkB,KAAK,GAAG1B,WAAW,CACvBG,YADuB,EAEvBsB,WAAW,CAACE,SAAZ,EAFuB,EAGvB5B,eAAe,CAACQ,eAAe,CAACQ,MAAD,EAASM,gBAAT,CAAhB,EAA4CE,MAA5C,EAAoDrB,KAApD,CAHQ,CAAzB;AAMAwB,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpBH,EAAAA,WAAW,CAACI,SAAZ,CAAsBH,KAAK,CAACI,QAAN,EAAtB;AACD,CAFD;AAIAjC,QAAQ,CAACkC,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMEM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["\r\n// 8/16 sj\r\n// (userId)를 바탕으로 장바구니 추가/ 불러오기 기능 구현\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducers from './reducers';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport axios from 'axios'; // 추가사항\r\nimport axiosMiddleware from 'redux-axios-middleware'; // 추가사항\r\nimport { StateLoader, interceptors, onErrorHandler } from './util';\r\nimport App from './App';\r\nimport NaviBar from './component/board/NaviBar';\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\n// 여기서만 선언 endpoint가 oauth가 아니면 override 할거\r\nconst clientId = 'test01';\r\nconst clientSecret = 'test01';\r\n\r\n//Axios client 생성// 왜 여기서 생성을 했을 까요?\r\nconst client = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Authorization': `Basic ${btoa(`${clientId}:${clientSecret}`)}`,\r\n    'Cache-Control': 'no-cache'\r\n  },\r\n  responseType: 'json'\r\n});\r\n\r\n// config 설정\r\nconst middlewareConfig = {\r\n  // authoprization을 bearer 토큰으로 바꿔주기 위한 인터셉터\r\n  interceptors,\r\n  // 401에러를 처리하여 토큰을 자동으로 갱신한 후, 이전 에 실패한 액션(api call)을 다시 수행  / 실행한 경우 다시 실행 \r\n  // 에러가 나면 무조건 실행 reqeust 나 respone 둘중에 처리해도 된다.\r\n  // 하지만 인터셉터랑 핸들러랑 차이가 있다. /\r\n  // 기본적인 onError 핸들러는 로그인시 실패 하면 /login_fail 또는 login_suscess 두가지중 하나로 온다.\r\n  onError: onErrorHandler\r\n};\r\n\r\nconst logger = createLogger({\r\n  collapsed: true\r\n});\r\n\r\nconst stateLoader = new StateLoader();\r\n\r\n\r\n// Store\r\n// Global영역에서 애플리케이션의 State와 비즈니스로직을 가지고 있고 있는 주체를 Store라고 한다.\r\n// State를 Global한 영역에서 관리한다는 말은 즉 State관리 라이브러리 사용의 목적 중 한가지 이다.\r\n// Redux에서는 State와 State를 핸들링하는 비즈니스로직을 가지고 있는 Reducer, Action등을 포함하는 의미.\r\nconst store = createStore(\r\n  rootReducers,\r\n  stateLoader.loadState(),\r\n  applyMiddleware(axiosMiddleware(client, middlewareConfig), logger, thunk)\r\n);\r\n\r\nstore.subscribe(() => {\r\n  stateLoader.saveState(store.getState());\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}