{"ast":null,"code":"var _jsxFileName = \"C:\\\\SuperFarmClient\\\\src\\\\component\\\\board\\\\reviewBoard\\\\ListReview.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from \"./Accordion\";\nimport { bindActionCreators } from 'redux';\nimport { Actions } from '../../../actions/index';\n\nclass ListReview extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._renderAllReviews = () => {\n      console.log('renderAllREviews ', this.props);\n      const reviewBoard = this.props.reviewBoard;\n      const items = reviewBoard.items;\n      var reviewItems = [];\n\n      if (items !== undefined && items !== null) {\n        reviewItems = items.map(review => React.createElement(Accordion, {\n          key: review.reviewBoardsNum,\n          review: review,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }));\n      }\n\n      return reviewItems;\n    };\n\n    this._nextPage = () => {\n      console.log('Next Page 작동');\n      const reviewBoards = this.props.reviewBoards;\n      console.log('NextPage ', reviewBoards);\n      let hasNextPage = reviewBoards.hasNext;\n      console.log('hasNext', hasNextPage);\n      var page = reviewBoards.page;\n      var size = reviewBoards.size;\n      let productBoardNum = reviewBoards.boardNum;\n\n      if (hasNextPage === true) {\n        page = page + 1;\n        console.log(page, '실제 다음페이지가 있을떄 작동');\n\n        this._getreviewBoards('productBoard', productBoardNum, size, page);\n      } else {\n        alert('마지막 페이지 입니다.');\n      }\n    };\n\n    this._prevPage = () => {\n      console.log('Prev Page 작동');\n      const reviewBoards = this.props.reviewBoards;\n      console.log('NextPage ', reviewBoards);\n      let hasNextPage = reviewBoards.hasNext;\n      console.log('hasNext', hasNextPage);\n      var page = reviewBoards.page;\n      var size = reviewBoards.size;\n      let productBoardNum = reviewBoards.boardNum;\n\n      if (page > 1) {\n        page = page - 1;\n        console.log(page, '실제 다음페이지가 있을떄 작동');\n\n        this._getreviewBoards('productBoard', productBoardNum, size, page);\n      }\n    };\n\n    this.state = {\n      reviewBoards: []\n    };\n    console.log(this.props, '  props 확인 ');\n  } // 시작시 reviewBoards를 가져 온다.\n\n\n  componentWillMount() {\n    this._getreviewBoards('productBoard', 5, 10, 1);\n  } // getreviewBoards Action 여기서 리뷰보드 리스트 가져오는거 실행\n  // type product 일때는 Type =productBoard  id= productBoard 번호\n  // size 는 기본값 10 page 는 기본값 1\n\n\n  _getreviewBoards(type, id, size, page) {\n    const getReviews = this.props.getReviews;\n    getReviews(type, id, size, page);\n    console.log(\"this.props>>>>>>>>>>>>>>>>>>>\", this.props);\n  }\n\n  _addReview() {\n    window.open('/review/write', 'Review  작성', 'width=430,height=500,location=no,status=no,scrollbars=yes');\n  } // 다음 페이지 \n\n\n  render() {\n    console.log(\"this.props!=>>\", this.props);\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this._renderAllReviews(), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"\\uC774\\uC804\",\n      onClick: this._prevPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"\\uB2E4\\uC74C\",\n      onClick: this._nextPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"\\uC791\\uC131\",\n      onClick: this._addReview,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state, ' mapStateToProps state');\n  const board = state.board;\n  const reviewBoard = board.reviewBoard; // const {items} = reviewBoards\n\n  console.log('mpaStateToProps', reviewBoard);\n  return {\n    reviewBoard\n  };\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getReviews: (product, id, size, page) => dispatch(Actions.getReviews(product, id, size, page)),\n  removeReview: () => dispatch(Actions.removeReview())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListReview);","map":{"version":3,"sources":["C:\\SuperFarmClient\\src\\component\\board\\reviewBoard\\ListReview.js"],"names":["React","connect","Accordion","bindActionCreators","Actions","ListReview","Component","constructor","props","_renderAllReviews","console","log","reviewBoard","items","reviewItems","undefined","map","review","reviewBoardsNum","_nextPage","reviewBoards","hasNextPage","hasNext","page","size","productBoardNum","boardNum","_getreviewBoards","alert","_prevPage","state","componentWillMount","type","id","getReviews","_addReview","window","open","render","mapStateToProps","board","mapDispatchToProps","dispatch","product","removeReview"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from \"./Accordion\";\nimport { bindActionCreators } from 'redux';\nimport { Actions } from '../../../actions/index';\n\n\n\nclass ListReview extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      reviewBoards: []\n    }\n    console.log(this.props,'  props 확인 ')\n  }\n  // 시작시 reviewBoards를 가져 온다.\n  componentWillMount() {\n\n    this._getreviewBoards('productBoard',5,10,1);\n  }\n  // getreviewBoards Action 여기서 리뷰보드 리스트 가져오는거 실행\n  // type product 일때는 Type =productBoard  id= productBoard 번호\n  // size 는 기본값 10 page 는 기본값 1\n  _getreviewBoards(type, id, size,page){\n    const { getReviews } = this.props;\n    getReviews(type,id,size,page);\n    console.log(\"this.props>>>>>>>>>>>>>>>>>>>\", this.props)\n  }\n  _renderAllReviews = () => {\n    console.log('renderAllREviews ', this.props)\n    const { reviewBoard } = this.props;\n    const { items } = reviewBoard;\n    var reviewItems = [];\n\n    if (items !== undefined && items !== null) {\n      reviewItems = items.map(review =>\n        <Accordion key={review.reviewBoardsNum} review={review} />\n      )\n    }\n    return reviewItems\n  }\n  _addReview(){\n    window.open('/review/write', 'Review  작성', 'width=430,height=500,location=no,status=no,scrollbars=yes')\n  }\n  // 다음 페이지 \n  _nextPage = () =>{\n    console.log('Next Page 작동')\n    const { reviewBoards } = this.props;\n    console.log('NextPage ',reviewBoards)\n    \n    let hasNextPage = reviewBoards.hasNext;\n    console.log('hasNext',hasNextPage, )\n\n    var page = reviewBoards.page\n    var size = reviewBoards.size\n    let productBoardNum = reviewBoards.boardNum\n\n    if(hasNextPage === true){\n      page = page +1;\n      console.log( page, '실제 다음페이지가 있을떄 작동');\n      this._getreviewBoards('productBoard',productBoardNum,size,page)\n    }else{\n      alert('마지막 페이지 입니다.')\n    }    \n  }\n  // 이전 페이지\n  _prevPage = () =>{\n    \n    console.log('Prev Page 작동')\n    const { reviewBoards } = this.props;\n    console.log('NextPage ',reviewBoards)\n    \n    let hasNextPage = reviewBoards.hasNext;\n    console.log('hasNext',hasNextPage, )\n    var page = reviewBoards.page\n    var size = reviewBoards.size\n    let productBoardNum = reviewBoards.boardNum\n\n    if(page > 1 ){\n      page = page - 1;\n      console.log( page, '실제 다음페이지가 있을떄 작동');\n      this._getreviewBoards('productBoard',productBoardNum,size,page)\n    }    \n\n  }\n\n\n  render() {\n    console.log(\"this.props!=>>\", this.props)\n    return (\n      <div className=\"content\">\n        {this._renderAllReviews()}\n        <input type=\"button\" value=\"이전\" onClick={this._prevPage} />        \n        <input type=\"button\" value=\"다음\" onClick={this._nextPage} />\n        <input type=\"button\" value=\"작성\" onClick={this._addReview}/>\n      </div>\n    );\n  }\n\n\n\n}\n\nfunction mapStateToProps(state) {\n\n  console.log(state, ' mapStateToProps state')\n  const { board } = state;\n  const { reviewBoard } = board\n  // const {items} = reviewBoards\n  console.log('mpaStateToProps', reviewBoard)\n    return {\n      reviewBoard\n  };\n}\n\nconst mapDispatchToProps=(dispatch)=>({\n    getReviews: (product,id,size,page ) => dispatch(Actions.getReviews(product,id,size,page)),\n    removeReview:() => dispatch(Actions.removeReview())\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ListReview);"]},"metadata":{},"sourceType":"module"}