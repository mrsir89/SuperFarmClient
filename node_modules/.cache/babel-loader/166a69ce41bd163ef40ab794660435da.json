{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\SuperFarmClientTemp\\\\SuperFarmClient\\\\src\\\\component\\\\board\\\\UserEditLogin.js\";\nimport React from 'react';\nimport { Actions } from '../../actions/index';\nimport { ActionTypes } from '../../contants';\nimport { connect } from 'react-redux';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport UserEdit from './UserEdit';\n\nconst CheckAsync = (customerId, password, history) => dispatch => {\n  console.log('loginAsynce 시작 ', customerId, password);\n  return dispatch(Actions.login(customerId, password)).then(response => {\n    if (response.type === ActionTypes.LOGIN_SUCCESS) {\n      return dispatch(Actions.getUserMe());\n    } else {\n      console.log('로그인 실패 ', response);\n      return Promise.reject(response);\n    }\n  }).then(response => {\n    if (response.type === ActionTypes.GET_USERME_SUCCESS) {\n      console.log(\"userme 성공 >>>>>>>>>>>>\");\n      history.push(\"/\");\n    } else {\n      return Promise.reject(response);\n    }\n  });\n};\n\nclass userCheck extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      customerId: '',\n      password: ''\n    };\n    this._onChange = this._onChange.bind(this);\n    this.routeChange = this.routeChange.bind(this);\n  } //constructor\n\n\n  _onChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  } // text안의 내용을 담아 setState\n  // Change endpoint after Login (with some error)\n\n\n  routeChange() {\n    let path = '/';\n    this.props.history.push(path);\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const login = this.state.login;\n    let customerId = this.state.customerId;\n    console.log(\"sumit customerId\", customerId);\n    let password = this.state.password;\n    console.log(\"password\", password);\n    login(customerId, password, history);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"userCheck\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"userCheckForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"\\uC0AC\\uC6A9\\uC790 \\uD655\\uC778\"), React.createElement(\"form\", {\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"customerId\",\n      value: this.state.customerId,\n      onChange: this._onChange,\n      placeholder: \"\\uC544\\uC774\\uB514\\uC785\\uB825\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this._onChange,\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uC785\\uB825\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      name: \"\\uD655\\uC778\",\n      value: \"userCheck\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  login: (customerId, password, history) => dispatch(CheckAsync(customerId, password, history))\n});\n\nexport default connect(mapDispatchToProps, null)(userCheck);","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\component\\board\\UserEditLogin.js"],"names":["React","Actions","ActionTypes","connect","withRouter","Redirect","UserEdit","CheckAsync","customerId","password","history","dispatch","console","log","login","then","response","type","LOGIN_SUCCESS","getUserMe","Promise","reject","GET_USERME_SUCCESS","push","userCheck","Component","constructor","props","state","_onChange","bind","routeChange","event","target","value","name","setState","path","onSubmit","preventDefault","render","e","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Actions } from '../../actions/index';\r\nimport { ActionTypes } from '../../contants';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport UserEdit from './UserEdit';\r\n\r\nconst CheckAsync = (customerId, password, history)=> (dispatch) => {\r\n    console.log('loginAsynce 시작 ', customerId, password)\r\n    return dispatch(Actions.login(customerId, password))\r\n      .then(response => {\r\n        if (response.type === ActionTypes.LOGIN_SUCCESS) {\r\n          return dispatch(Actions.getUserMe());\r\n        } else {\r\n          console.log('로그인 실패 ', response)\r\n          return Promise.reject(response);\r\n        }\r\n      }).then(response => {\r\n        if (response.type === ActionTypes.GET_USERME_SUCCESS) {\r\n          console.log(\"userme 성공 >>>>>>>>>>>>\");\r\n          history.push(\"/\");\r\n        } else {\r\n          return Promise.reject(response);\r\n        }\r\n      });\r\n}\r\n\r\nclass userCheck extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            customerId:'',\r\n            password:''\r\n        }\r\n        this._onChange=this._onChange.bind(this);\r\n        this.routeChange = this.routeChange.bind(this);\r\n    }//constructor\r\n\r\n    _onChange(event){\r\n        const target = event.target;\r\n        const value=target.value;\r\n        const name=target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }// text안의 내용을 담아 setState\r\n\r\n     // Change endpoint after Login (with some error)\r\n    routeChange() {\r\n        let path = '/';\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    onSubmit(event){\r\n        event.preventDefault();\r\n        const {login}=this.state;\r\n        let customerId=this.state.customerId;\r\n        console.log(\"sumit customerId\", customerId);\r\n        let password=this.state.password;\r\n        console.log(\"password\", password);\r\n\r\n        login(customerId, password, history);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"userCheck\">\r\n                {/* RELOGIN(CheckUser) */}\r\n                <div className=\"userCheckForm\">\r\n                    사용자 확인\r\n                </div>\r\n                <form onSubmit={e => this.onSubmit(e)}>\r\n                    <input type=\"text\" name=\"customerId\" value={this.state.customerId} onChange={this._onChange} placeholder=\"아이디입력\" />\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this._onChange} placeholder=\"비밀번호입력\" />\r\n                    <input type=\"submit\" name=\"확인\" value=\"userCheck\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>({\r\n    login:(customerId, password, history) => dispatch(CheckAsync(customerId, password, history))\r\n    \r\n});\r\nexport default connect(mapDispatchToProps, null)(userCheck);"]},"metadata":{},"sourceType":"module"}