{"ast":null,"code":"import _defineProperty from \"D:\\\\Project\\\\SuperFarmClientTemp\\\\SuperFarmClient\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ActionTypes } from '../contants'; // ProductList에서 보여주는 상품들 (items)와 Cart에서 보여주는 장바구니에 추가된 상품들(cart) \n// orders : {\n//     items : [],\n//     shipping : {배송지, 배송방법, 배송비, 수취인, 수취인 전화번호, 배송 메세지}, \n// }\n\nconst initialStateProduct = {\n  productBoard: [],\n  category: []\n}; // 추후 authentication reducer와 같은 방식(axios middleware)으로 바꿀 예정\n\nconst productReducer = (state = initialStateProduct, action) => {\n  const productBoard = state.productBoard,\n        cartlist = state.cartlist;\n  const payload = action.payload;\n\n  switch (action.type) {\n    case ActionTypes.LOAD_PRODUCTLIST_SUCCESS:\n      if (payload !== undefined && payload !== null) {\n        const data = payload.data;\n\n        if (data !== undefined && data !== null) {\n          return _objectSpread({}, state, {\n            productBoard: data\n          });\n        }\n      }\n\n      return state;\n\n    case ActionTypes.LOAD_LOWER_PRODUCTLIST_SUCCESS:\n      if (payload !== undefined && payload !== null) {\n        const data = payload.data;\n\n        if (data !== undefined && data !== null) {\n          return _objectSpread({}, state, {\n            productBoard: data\n          });\n        }\n      }\n\n      return state;\n    // case ActionTypes.ADD_CART:\n    //     const { item } = action\n    //     return {\n    //         ...state,\n    //         cart: [\n    //             ...cart,\n    //             item\n    //         ]\n    //     }\n    // 카테고리 불러오기 \n\n    case ActionTypes.GET_CATEGORIES_SUCCESS:\n      if (payload !== undefined && payload !== null) {\n        const data = payload.data;\n\n        if (data !== undefined && data !== null) {\n          return _objectSpread({}, state, {\n            category: data\n          });\n        }\n      }\n\n      return state;\n\n    case ActionTypes.LOAD_QNABOARDLIST_SUCCESS:\n      if (payload !== undefined && payload !== null) {\n        const data = payload.data;\n        console.log(data, 'ActionTypes.LOAD_QNABOARDLIST_SUCCESS');\n        return {\n          qnaBoard: {\n            data\n          }\n        };\n      } else return state;\n\n    case ActionTypes.WRITE_QNABOARD_SUCCESS:\n      if (payload !== undefined && payload !== null) {\n        const data = payload.data;\n        console.log(data, 'ActionTypes.WRITE_QNABOARD_SUCCESS');\n        return _objectSpread({}, state, {\n          qnaBoard: {\n            data\n          }\n        });\n      } else return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default productReducer;","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\reducers\\product.reducer.js"],"names":["ActionTypes","initialStateProduct","productBoard","category","productReducer","state","action","cartlist","payload","type","LOAD_PRODUCTLIST_SUCCESS","undefined","data","LOAD_LOWER_PRODUCTLIST_SUCCESS","GET_CATEGORIES_SUCCESS","LOAD_QNABOARDLIST_SUCCESS","console","log","qnaBoard","WRITE_QNABOARD_SUCCESS"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG;AAExBC,EAAAA,YAAY,EAAE,EAFU;AAGxBC,EAAAA,QAAQ,EAAE;AAHc,CAA5B,C,CAOA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,mBAAT,EAA8BK,MAA9B,KAAyC;AAAA,QACpDJ,YADoD,GACzBG,KADyB,CACpDH,YADoD;AAAA,QACtCK,QADsC,GACzBF,KADyB,CACtCE,QADsC;AAAA,QAEpDC,OAFoD,GAExCF,MAFwC,CAEpDE,OAFoD;;AAI5D,UAAQF,MAAM,CAACG,IAAf;AACI,SAAKT,WAAW,CAACU,wBAAjB;AAEI,UAAIF,OAAO,KAAKG,SAAZ,IAAyBH,OAAO,KAAK,IAAzC,EAA+C;AAAA,cACnCI,IADmC,GAC1BJ,OAD0B,CACnCI,IADmC;;AAE3C,YAAIA,IAAI,KAAKD,SAAT,IAAsBC,IAAI,KAAK,IAAnC,EAAyC;AACrC,mCACOP,KADP;AAEIH,YAAAA,YAAY,EAAEU;AAFlB;AAIH;AACJ;;AACD,aAAOP,KAAP;;AAEJ,SAAKL,WAAW,CAACa,8BAAjB;AAEI,UAAIL,OAAO,KAAKG,SAAZ,IAAyBH,OAAO,KAAK,IAAzC,EAA+C;AAAA,cACnCI,IADmC,GAC1BJ,OAD0B,CACnCI,IADmC;;AAE3C,YAAIA,IAAI,KAAKD,SAAT,IAAsBC,IAAI,KAAK,IAAnC,EAAyC;AACrC,mCACOP,KADP;AAEIH,YAAAA,YAAY,EAAEU;AAFlB;AAIH;AACJ;;AACD,aAAOP,KAAP;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,SAAKL,WAAW,CAACc,sBAAjB;AACI,UAAIN,OAAO,KAAKG,SAAZ,IAAyBH,OAAO,KAAK,IAAzC,EAA+C;AAAA,cACnCI,IADmC,GAC1BJ,OAD0B,CACnCI,IADmC;;AAE3C,YAAIA,IAAI,KAAKD,SAAT,IAAsBC,IAAI,KAAK,IAAnC,EAAyC;AACrC,mCACOP,KADP;AAEIF,YAAAA,QAAQ,EAAES;AAFd;AAIH;AACJ;;AACD,aAAOP,KAAP;;AAGJ,SAAKL,WAAW,CAACe,yBAAjB;AACI,UAAIP,OAAO,KAAKG,SAAZ,IAAyBH,OAAO,KAAK,IAAzC,EAA+C;AAAA,cACnCI,IADmC,GAC1BJ,OAD0B,CACnCI,IADmC;AAE3CI,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,uCAAlB;AACA,eAAO;AACHM,UAAAA,QAAQ,EAAE;AACNN,YAAAA;AADM;AADP,SAAP;AAKH,OARD,MAUI,OAAOP,KAAP;;AACR,SAAKL,WAAW,CAACmB,sBAAjB;AACI,UAAIX,OAAO,KAAKG,SAAZ,IAAyBH,OAAO,KAAK,IAAzC,EAA+C;AAAA,cACnCI,IADmC,GAC1BJ,OAD0B,CACnCI,IADmC;AAE3CI,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,oCAAlB;AACA,iCACOP,KADP;AAEIa,UAAAA,QAAQ,EAAE;AACNN,YAAAA;AADM;AAFd;AAMH,OATD,MAWI,OAAOP,KAAP;;AAER;AACI,aAAOA,KAAP;AA/ER;AAiFH,CArFD;;AAuFA,eAAeD,cAAf","sourcesContent":["import { ActionTypes } from '../contants';\n\n// ProductList에서 보여주는 상품들 (items)와 Cart에서 보여주는 장바구니에 추가된 상품들(cart) \n// orders : {\n//     items : [],\n//     shipping : {배송지, 배송방법, 배송비, 수취인, 수취인 전화번호, 배송 메세지}, \n// }\nconst initialStateProduct = {\n\n    productBoard: [],\n    category: []\n};\n\n\n// 추후 authentication reducer와 같은 방식(axios middleware)으로 바꿀 예정\nconst productReducer = (state = initialStateProduct, action) => {\n    const { productBoard, cartlist } = state;\n    const { payload } = action;\n\n    switch (action.type) {\n        case ActionTypes.LOAD_PRODUCTLIST_SUCCESS:\n\n            if (payload !== undefined && payload !== null) {\n                const { data } = payload;\n                if (data !== undefined && data !== null) {\n                    return {\n                        ...state,\n                        productBoard: data\n                    };\n                }\n            }\n            return state;\n\n        case ActionTypes.LOAD_LOWER_PRODUCTLIST_SUCCESS:\n\n            if (payload !== undefined && payload !== null) {\n                const { data } = payload;\n                if (data !== undefined && data !== null) {\n                    return {\n                        ...state,\n                        productBoard: data\n                    };\n                }\n            }\n            return state;\n\n        // case ActionTypes.ADD_CART:\n        //     const { item } = action\n        //     return {\n        //         ...state,\n        //         cart: [\n        //             ...cart,\n        //             item\n        //         ]\n        //     }\n\n            \n        // 카테고리 불러오기 \n        case ActionTypes.GET_CATEGORIES_SUCCESS:\n            if (payload !== undefined && payload !== null) {\n                const { data } = payload;\n                if (data !== undefined && data !== null) {\n                    return {\n                        ...state,\n                        category: data\n                    };\n                }\n            }\n            return state;\n\n\n        case ActionTypes.LOAD_QNABOARDLIST_SUCCESS:\n            if (payload !== undefined && payload !== null) {\n                const { data } = payload\n                console.log(data, 'ActionTypes.LOAD_QNABOARDLIST_SUCCESS')\n                return {\n                    qnaBoard: {\n                        data\n                    }\n                }\n            }\n            else\n                return state;\n        case ActionTypes.WRITE_QNABOARD_SUCCESS:\n            if (payload !== undefined && payload !== null) {\n                const { data } = payload\n                console.log(data, 'ActionTypes.WRITE_QNABOARD_SUCCESS')\n                return {\n                    ...state,\n                    qnaBoard: {\n                        data\n                    }\n                }\n            }\n            else\n                return state;\n\n        default:\n            return state;\n    }\n}\n\nexport default productReducer;"]},"metadata":{},"sourceType":"module"}