{"ast":null,"code":"import { ActionTypes } from '../contants'; // React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\n\nconst getClientToken = () => {\n  const formData = new FormData();\n  formData.append('grant_type', 'client_credentials');\n  console.log('Actions의 getClientToken 발급 받는다. ');\n  return {\n    type: ActionTypes.GET_TOKEN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n};\n\nconst signup = signupCustomer => {\n  console.log(signupCustomer, ' 여기는 signup 안쪽');\n  return {\n    type: ActionTypes.SIGNUP,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(signupCustomer)\n      }\n    }\n  };\n};\n\nconst login = (customerId, password) => {\n  const formData = new FormData();\n  formData.append('grant_type', 'password');\n  formData.append('username', customerId);\n  formData.append('password', password);\n  return {\n    type: ActionTypes.LOGIN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n};\n\nconst getUserMe = () => {\n  return {\n    type: ActionTypes.GET_USERME,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/users/me'\n      }\n    }\n  };\n};\n\nconst logout = () => ({\n  type: ActionTypes.LOGOUT\n});\n\nconst writeQnABoard = () => ({\n  type: ActionTypes.QNABOARD_WRITE\n});\n\nconst qnaboardList = (productNum, size, page) => {\n  const formdata = new FormData();\n  formdata.append('productNum', 5);\n  formdata.append('size', size);\n  formdata.append('page', page);\n  return {\n    type: ActionTypes.QNABOARDLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/product',\n        data: formdata\n      }\n    }\n  };\n}; // 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\n\n\nconst addCart = item => ({\n  type: ActionTypes.ADD_CART,\n  item\n}); // 0810 DB에 있는 상품 데이터 가져오는 action\n// const loadProductList = (items) => ({\n//   type: 'LOAD_PRODUCTLIST',\n//   items\n// });\n// 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \n\n\nconst loadProductList = () => {\n  console.log('loadProductList');\n  return {\n    type: ActionTypes.LOAD_PRODUCTLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: \"/product/all\" // headers: [\n        //   ['Accept', 'application/json']\n        // ]\n\n      }\n    }\n  };\n};\n\nexport const Actions = {\n  login,\n  signup,\n  getClientToken,\n  logout,\n  getUserMe,\n  qnaboardList,\n  writeQnABoard,\n  addCart,\n  loadProductList\n};","map":{"version":3,"sources":["D:\\development\\SuperFarmClient\\SuperFarmClient\\src\\actions\\index.js"],"names":["ActionTypes","getClientToken","formData","FormData","append","console","log","type","GET_TOKEN","payload","request","method","url","data","signup","signupCustomer","SIGNUP","headers","JSON","stringify","login","customerId","password","LOGIN","getUserMe","GET_USERME","logout","LOGOUT","writeQnABoard","QNABOARD_WRITE","qnaboardList","productNum","size","page","formdata","QNABOARDLIST","addCart","item","ADD_CART","loadProductList","LOAD_PRODUCTLIST","Actions"],"mappings":"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","sourcesContent":["import { ActionTypes } from '../contants';\r\n// React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\r\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\r\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\r\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\r\n\r\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\r\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\r\nconst getClientToken = () => {\r\n  const formData = new FormData();\r\n  formData.append('grant_type', 'client_credentials');\r\n  console.log('Actions의 getClientToken 발급 받는다. ');\r\n  return ({\r\n    type: ActionTypes.GET_TOKEN,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/oauth/token',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst signup = (signupCustomer) => {\r\n  console.log(signupCustomer, ' 여기는 signup 안쪽')\r\n  return ({\r\n    type: ActionTypes.SIGNUP,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/signup',\r\n        headers: {\r\n          'Content-Type': 'application/json; charset: utf-8'\r\n        },\r\n        data: JSON.stringify(signupCustomer)\r\n      }\r\n    }\r\n  }\r\n  );\r\n};\r\n\r\nconst login = (customerId, password) => {\r\n  const formData = new FormData();\r\n  formData.append('grant_type', 'password');\r\n  formData.append('username', customerId);\r\n  formData.append('password', password);\r\n  return ({\r\n    type: ActionTypes.LOGIN,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/oauth/token',\r\n        data: formData\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst getUserMe = () => {\r\n  return ({\r\n    type: ActionTypes.GET_USERME,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: '/users/me'\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst logout = () => ({\r\n  type: ActionTypes.LOGOUT\r\n})\r\n\r\nconst writeQnABoard = () => ({\r\n  type: ActionTypes.QNABOARD_WRITE\r\n})\r\n\r\nconst qnaboardList = (productNum,size,page) => {\r\n  const formdata = new FormData();\r\n  formdata.append('productNum',5);\r\n  formdata.append('size',size);\r\n  formdata.append('page',page);\r\n  return({\r\n    type: ActionTypes.QNABOARDLIST,\r\n    payload:{\r\n      request:{\r\n        method:'POST',\r\n        url:'/question/product',\r\n        data:formdata\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n\r\n// 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\r\nconst addCart = (item) => ({\r\n  type: ActionTypes.ADD_CART,\r\n  item\r\n});\r\n\r\n// 0810 DB에 있는 상품 데이터 가져오는 action\r\n// const loadProductList = (items) => ({\r\n//   type: 'LOAD_PRODUCTLIST',\r\n//   items\r\n// });\r\n\r\n// 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \r\nconst loadProductList = () => {\r\n  console.log('loadProductList')\r\n  return ({\r\n    type: ActionTypes.LOAD_PRODUCTLIST,\r\n    payload: {\r\n      request: {\r\n        method: 'POST',\r\n        url: `/product/all`\r\n        // headers: [\r\n        //   ['Accept', 'application/json']\r\n        // ]\r\n      }\r\n    }\r\n  })\r\n};\r\n\r\n\r\nexport const Actions = {\r\n  login,\r\n  signup,\r\n  getClientToken,\r\n  logout,\r\n  getUserMe,\r\n  qnaboardList,\r\n  writeQnABoard,\r\n  addCart,\r\n  loadProductList\r\n\r\n};"]},"metadata":{},"sourceType":"module"}