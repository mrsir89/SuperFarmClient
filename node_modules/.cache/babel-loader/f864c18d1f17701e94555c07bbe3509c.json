{"ast":null,"code":"var _jsxFileName = \"C:\\\\SuperFarmClient\\\\src\\\\component\\\\board\\\\QnABoard.js\";\nimport React from 'react';\nimport { Actions } from '../../actions/index';\nimport { ActionTypes } from '../../contants';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nconst listQnaBoard = () => dispatch => {\n  return dispatch(Actions.getQnABoard()).then(response => {\n    if (response.type === ActionTypes.QNABOARD_SUCCESS) {\n      console.log(' QnABoard Reading 성공');\n    } else {\n      return Promise.reject(response);\n    }\n  });\n};\n\nconst writeQnABoard = qnaContent => dispatch => {\n  return dispatch(Actions.writeQnABoard()).then(response => {\n    if (response.type === ActionTypes.QNABOARD_SUCCESS) {\n      console.log('QnA READ SUCCESS');\n      return dispatch(Actions.getQnABoard());\n    } else {\n      return Promise.reject(response);\n    }\n  });\n};\n\nclass QnABoard extends React.Component {\n  constructor(props) {\n    super(props);\n    const items = props.items;\n    this.state = {\n      items: items // this.handleClick=this.handleClick.bind(this);\n\n    };\n    console.log('여기 실행 되나?', this.state);\n  } //   handleClick(e){\n  //     const {Clickitem}=this.state;\n  //     this.setState({\n  //       Clickitem:{\n  //         ...Clickitem,\n  //         isExpanded : !this.setState.isExpanded\n  //       }\n  //     })\n  //   }\n\n\n  componentWillMount() {\n    const qnaBoard = this.props.qnaBoard;\n    qnaBoard();\n  }\n\n  _writeQnA() {\n    const writeQnABoard = this.props.writeQnABoard;\n  }\n\n  render() {\n    const items = this.state.items;\n    console.log(this.state, 'render');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"\\uB2F5\\uBCC0\\uC0C1\\uD0DC\"), React.createElement(\"div\", {\n      className: \"col-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"\\uC81C\\uBAA9\"), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"\\uC791\\uC131\\uC790\"), React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"\\uC791\\uC131\\uC77C\")), items.map(item => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, item.questionBoardStatus), React.createElement(\"div\", {\n      className: \"col-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"details\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"summary\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, item.questionBoardContent), item.questionAnswer.map(answer => React.createElement(\"div\", {\n      className: \"row\",\n      hidden: item.isExpanded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, answer.answerWriter), React.createElement(\"div\", {\n      className: \"col-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, answer.answerContent))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"botton\",\n      value: \"\\uC791\\uC131\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, item.user.username), React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, item.questionBoardRegdate)))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  qnaBoard: () => dispatch(Actions.getQnABoard()),\n  writeQnABoard: qnaContent => dispatch(writeQnABoard(qnaContent))\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(QnABoard));","map":{"version":3,"sources":["C:\\SuperFarmClient\\src\\component\\board\\QnABoard.js"],"names":["React","Actions","ActionTypes","connect","withRouter","listQnaBoard","dispatch","getQnABoard","then","response","type","QNABOARD_SUCCESS","console","log","Promise","reject","writeQnABoard","qnaContent","QnABoard","Component","constructor","props","items","state","componentWillMount","qnaBoard","_writeQnA","render","map","item","questionBoardStatus","questionBoardContent","questionAnswer","answer","isExpanded","answerWriter","answerContent","user","username","questionBoardRegdate","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAMC,QAAQ,IAAI;AACrC,SAAOA,QAAQ,CAACL,OAAO,CAACM,WAAR,EAAD,CAAR,CACJC,IADI,CACCC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,KAAkBR,WAAW,CAACS,gBAAlC,EAAoD;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAFD,MAEO;AACL,aAAOC,OAAO,CAACC,MAAR,CAAeN,QAAf,CAAP;AACD;AACF,GAPI,CAAP;AAQD,CATD;;AAYA,MAAMO,aAAa,GAAIC,UAAD,IAAgBX,QAAQ,IAAI;AAChD,SAAOA,QAAQ,CAACL,OAAO,CAACe,aAAR,EAAD,CAAR,CACJR,IADI,CACCC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,KAAkBR,WAAW,CAACS,gBAAlC,EAAoD;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAOP,QAAQ,CAACL,OAAO,CAACM,WAAR,EAAD,CAAf;AACD,KAHD,MAGO;AACL,aAAOO,OAAO,CAACC,MAAR,CAAeN,QAAf,CAAP;AACD;AACF,GARI,CAAP;AASD,CAVD;;AAYA,MAAMS,QAAN,SAAuBlB,KAAK,CAACmB,SAA7B,CAAuC;AAErCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,UAETC,KAFS,GAECD,KAFD,CAETC,KAFS;AAGjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAEA,KADI,CAGb;;AAHa,KAAb;AAIAV,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKU,KAA9B;AACD,GAVoC,CAYrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,kBAAkB,GAAG;AAAA,UACXC,QADW,GACE,KAAKJ,KADP,CACXI,QADW;AAEnBA,IAAAA,QAAQ;AACT;;AAEDC,EAAAA,SAAS,GAAG;AAAA,UACFV,aADE,GACgB,KAAKK,KADrB,CACFL,aADE;AAGX;;AAEDW,EAAAA,MAAM,GAAG;AAAA,UACCL,KADD,GACW,KAAKC,KADhB,CACCD,KADD;AAEPV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKU,KAAjB,EAAwB,QAAxB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAHF,EAIE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,CADF,EAOGD,KAAK,CAACM,GAAN,CAAWC,IAAD,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBA,IAAI,CAACC,mBAA3B,CADF,EAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAUD,IAAI,CAACE,oBAAf,CADF,EAEGF,IAAI,CAACG,cAAL,CAAoBJ,GAApB,CAAyBK,MAAD,IACvB;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,MAAM,EAAEJ,IAAI,CAACK,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBD,MAAM,CAACE,YAA/B,CADF,EAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBF,MAAM,CAACG,aAAhC,CAFF,CADD,CAFH,CADF,CAFF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAbF,EAiBE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBP,IAAI,CAACQ,IAAL,CAAUC,QAAlC,CAjBF,EAkBE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBT,IAAI,CAACU,oBAA7B,CAlBF,CADF,CADD,CAPH,CADF;AAkCD;;AArEoC;;AAwEvC,MAAMC,kBAAkB,GAAIlC,QAAD,KAAe;AACxCmB,EAAAA,QAAQ,EAAE,MAAMnB,QAAQ,CAACL,OAAO,CAACM,WAAR,EAAD,CADgB;AAExCS,EAAAA,aAAa,EAAGC,UAAD,IAAgBX,QAAQ,CAACU,aAAa,CAACC,UAAD,CAAd;AAFC,CAAf,CAA3B;;AAMA,eAAeb,UAAU,CAACD,OAAO,CAAC,IAAD,EAAOqC,kBAAP,CAAP,CAAkCtB,QAAlC,CAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { Actions } from '../../actions/index';\r\nimport { ActionTypes } from '../../contants';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst listQnaBoard = () => dispatch => {\r\n  return dispatch(Actions.getQnABoard())\r\n    .then(response => {\r\n      if (response.type === ActionTypes.QNABOARD_SUCCESS) {\r\n        console.log(' QnABoard Reading 성공')\r\n      } else {\r\n        return Promise.reject(response);\r\n      }\r\n    });\r\n};\r\n\r\n\r\nconst writeQnABoard = (qnaContent) => dispatch => {\r\n  return dispatch(Actions.writeQnABoard())\r\n    .then(response => {\r\n      if (response.type === ActionTypes.QNABOARD_SUCCESS) {\r\n        console.log('QnA READ SUCCESS')\r\n        return dispatch(Actions.getQnABoard())\r\n      } else {\r\n        return Promise.reject(response);\r\n      }\r\n    });\r\n};\r\n\r\nclass QnABoard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    const { items } = props;\r\n    this.state = {\r\n      items: items\r\n    }\r\n    // this.handleClick=this.handleClick.bind(this);\r\n    console.log('여기 실행 되나?', this.state)\r\n  }\r\n\r\n  //   handleClick(e){\r\n  //     const {Clickitem}=this.state;\r\n  //     this.setState({\r\n  //       Clickitem:{\r\n  //         ...Clickitem,\r\n  //         isExpanded : !this.setState.isExpanded\r\n  //       }\r\n  //     })\r\n  //   }\r\n\r\n  componentWillMount() {\r\n    const { qnaBoard } = this.props\r\n    qnaBoard();\r\n  }\r\n\r\n  _writeQnA() {\r\n    const { writeQnABoard } = this.props\r\n\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.state;\r\n    console.log(this.state, 'render');\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">답변상태</div>\r\n          <div className=\"col-7\">제목</div>\r\n          <div className=\"col-1\">작성자</div>\r\n          <div className=\"col-2\">작성일</div>\r\n        </div>\r\n        {items.map((item) => (\r\n          <div>\r\n            <div className=\"row\">\r\n              <div className=\"col\">{item.questionBoardStatus}</div>\r\n              <div className=\"col-7\">\r\n                <details>\r\n                  <summary>{item.questionBoardContent}</summary>\r\n                  {item.questionAnswer.map((answer) => (\r\n                    <div className=\"row\" hidden={item.isExpanded}>\r\n                      <div className=\"col-2\">{answer.answerWriter}</div>\r\n                      <div className=\"col-10\">{answer.answerContent}</div>\r\n                    </div>\r\n                  ))}\r\n                </details>\r\n              </div>\r\n              <div>\r\n                <input type=\"textarea\"></input>\r\n                <input type=\"botton\" value=\"작성\"></input>\r\n              </div>\r\n              <div className=\"col-1\">{item.user.username}</div>\r\n              <div className=\"col-2\">{item.questionBoardRegdate}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  qnaBoard: () => dispatch(Actions.getQnABoard()),\r\n  writeQnABoard: (qnaContent) => dispatch(writeQnABoard(qnaContent))\r\n});\r\n\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(QnABoard));"]},"metadata":{},"sourceType":"module"}