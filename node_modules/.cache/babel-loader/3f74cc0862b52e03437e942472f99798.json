{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\SuperFarmClientTemp\\\\SuperFarmClient\\\\src\\\\component\\\\board\\\\UserEditLogin.js\";\nimport React from 'react';\nimport { Actions } from '../../actions/index';\nimport { ActionTypes } from '../../contants';\nimport { connect } from 'react-redux';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport useredit from './UserEdit';\n\nconst loginAsync = (customerId, password) => dispatch => {\n  console.log(customerId, \"=======customerId\");\n  console.log(password, 'password!@!@!');\n  return dispatch(Actions.login(customerId, password)).then(response => {\n    if (response.type === ActionTypes.LOGIN_SUCCESS) {\n      return dispatch(Actions.getUserMe());\n    } else {\n      console.log('로그인 실패 ', response);\n      return Promise.reject(response);\n    }\n  }).then(response => {\n    if (response.type === ActionTypes.GET_USERME_SUCCESS) {\n      console.log(\"userme 성공 >>>>>>>>>>>>\");\n      return React.createElement(Redirect, {\n        push: true,\n        to: \"/useredit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n    } else {\n      return Promise.reject(response);\n    }\n  });\n};\n\nclass usereditLogin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      customerId: '',\n      password: ''\n    };\n  } //constructor\n\n\n  _onChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  } // text안의 내용을 담아 setState\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    const usereditLogin = this.state.usereditLogin;\n    let customerId = this.state.customerId;\n    let password = this.state.password;\n    usereditLogin(customerId, password);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"userCheck\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"userCheckForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"\\uC0AC\\uC6A9\\uC790 \\uD655\\uC778\"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"customerId\",\n      value: this.state.userId,\n      onChange: this._onChange,\n      placeholder: \"\\uC544\\uC774\\uB514\\uC785\\uB825\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this._onChange,\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uC785\\uB825\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      name: \"\\uD655\\uC778\",\n      value: \"userCheck\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  usereditLogin: (customerId, password) => dispatch(loginAsync(customerId, password));\n};\n\nexport default connect(mapDispatchToProps, null)(usereditLogin);","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\component\\board\\UserEditLogin.js"],"names":["React","Actions","ActionTypes","connect","withRouter","Redirect","useredit","loginAsync","customerId","password","dispatch","console","log","login","then","response","type","LOGIN_SUCCESS","getUserMe","Promise","reject","GET_USERME_SUCCESS","usereditLogin","Component","constructor","props","state","_onChange","event","target","value","name","setState","onSubmit","e","preventDefault","render","userId","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Actions } from '../../actions/index';\r\nimport { ActionTypes } from '../../contants';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport useredit from './UserEdit';\r\n\r\nconst loginAsync = (customerId, password)=> (dispatch) => {\r\n    console.log(customerId, \"=======customerId\");\r\n    console.log(password,'password!@!@!');\r\n    return dispatch(Actions.login(customerId, password))\r\n    .then(response => {\r\n      if (response.type === ActionTypes.LOGIN_SUCCESS) {\r\n        return dispatch(Actions.getUserMe())\r\n      } else {\r\n        console.log('로그인 실패 ', response)\r\n        return Promise.reject(response);\r\n      }\r\n    }).then(response => {\r\n      if (response.type === ActionTypes.GET_USERME_SUCCESS) {\r\n        console.log(\"userme 성공 >>>>>>>>>>>>\")\r\n        return <Redirect push to=\"/useredit\" />\r\n      } else {\r\n        return Promise.reject(response);\r\n      }\r\n    });\r\n}\r\n\r\nclass usereditLogin extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            customerId:'',\r\n            password:''\r\n        }\r\n    }//constructor\r\n\r\n    _onChange(event){\r\n        const target = event.target;\r\n        const value=target.value;\r\n        const name=target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }// text안의 내용을 담아 setState\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const {usereditLogin}=this.state;\r\n        let customerId=this.state.customerId;\r\n        let password=this.state.password;\r\n\r\n        usereditLogin(customerId, password);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"userCheck\">\r\n                {/* RELOGIN(CheckUser) */}\r\n                <div className=\"userCheckForm\">\r\n                    사용자 확인\r\n                        </div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input type=\"text\" name=\"customerId\" value={this.state.userId} onChange={this._onChange} placeholder=\"아이디입력\" />\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this._onChange} placeholder=\"비밀번호입력\" />\r\n                    <input type=\"submit\" name=\"확인\" value=\"userCheck\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    usereditLogin:(customerId, password) => dispatch(loginAsync(customerId, password))\r\n};\r\n\r\nexport default connect(mapDispatchToProps, null)(usereditLogin);"]},"metadata":{},"sourceType":"module"}