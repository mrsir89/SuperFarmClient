{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncParallelBailHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onResult,\n    onDone\n  }) {\n    let code = \"\";\n    code += \"var _results = new Array(\".concat(this.options.taps.length, \");\\n\");\n    code += \"var _checkDone = () => {\\n\";\n    code += \"for(var i = 0; i < _results.length; i++) {\\n\";\n    code += \"var item = _results[i];\\n\";\n    code += \"if(item === undefined) return false;\\n\";\n    code += \"if(item.result !== undefined) {\\n\";\n    code += onResult(\"item.result\");\n    code += \"return true;\\n\";\n    code += \"}\\n\";\n    code += \"if(item.error) {\\n\";\n    code += onError(\"item.error\");\n    code += \"return true;\\n\";\n    code += \"}\\n\";\n    code += \"}\\n\";\n    code += \"return false;\\n\";\n    code += \"}\\n\";\n    code += this.callTapsParallel({\n      onError: (i, err, done, doneBreak) => {\n        let code = \"\";\n        code += \"if(\".concat(i, \" < _results.length && ((_results.length = \").concat(i + 1, \"), (_results[\").concat(i, \"] = { error: \").concat(err, \" }), _checkDone())) {\\n\");\n        code += doneBreak(true);\n        code += \"} else {\\n\";\n        code += done();\n        code += \"}\\n\";\n        return code;\n      },\n      onResult: (i, result, done, doneBreak) => {\n        let code = \"\";\n        code += \"if(\".concat(i, \" < _results.length && (\").concat(result, \" !== undefined && (_results.length = \").concat(i + 1, \"), (_results[\").concat(i, \"] = { result: \").concat(result, \" }), _checkDone())) {\\n\");\n        code += doneBreak(true);\n        code += \"} else {\\n\";\n        code += done();\n        code += \"}\\n\";\n        return code;\n      },\n      onTap: (i, run, done, doneBreak) => {\n        let code = \"\";\n\n        if (i > 0) {\n          code += \"if(\".concat(i, \" >= _results.length) {\\n\");\n          code += done();\n          code += \"} else {\\n\";\n        }\n\n        code += run();\n        if (i > 0) code += \"}\\n\";\n        return code;\n      },\n      onDone\n    });\n    return code;\n  }\n\n}\n\nconst factory = new AsyncParallelBailHookCodeFactory();\n\nclass AsyncParallelBailHook extends Hook {\n  compile(options) {\n    factory.setup(this, options);\n    return factory.create(options);\n  }\n\n}\n\nObject.defineProperties(AsyncParallelBailHook.prototype, {\n  _call: {\n    value: undefined,\n    configurable: true,\n    writable: true\n  }\n});\nmodule.exports = AsyncParallelBailHook;","map":null,"metadata":{},"sourceType":"script"}