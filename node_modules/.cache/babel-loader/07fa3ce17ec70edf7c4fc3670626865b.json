{"ast":null,"code":"import { ActionTypes } from '../contants'; // React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\n\nconst getClientToken = () => {\n  const formData = new FormData();\n  formData.append('grant_type', 'client_credentials');\n  console.log('Actions의 getClientToken 발급 받는다. ');\n  return {\n    type: ActionTypes.GET_TOKEN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n};\n\nconst signup = signupCustomer => {\n  console.log(signupCustomer, ' 여기는 signup 안쪽');\n  return {\n    type: ActionTypes.SIGNUP,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(signupCustomer)\n      }\n    }\n  };\n};\n\nconst login = (customerId, password) => {\n  const formData = new FormData();\n  formData.append('grant_type', 'password');\n  formData.append('username', customerId);\n  formData.append('password', password);\n  console.log(customerId, 'ID ', password, ' Password');\n  return {\n    type: ActionTypes.LOGIN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  };\n};\n\nconst getUserMe = () => {\n  return {\n    type: ActionTypes.GET_USERME,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/users/me'\n      }\n    }\n  };\n};\n\nconst logout = () => ({\n  type: ActionTypes.LOGOUT\n});\n\nconst writeQnABoard = writeQnA => {\n  console.log('writeQnABoard');\n  return {\n    type: ActionTypes.WRITE_QNABOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/write/question',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(writeQnA)\n      }\n    }\n  };\n};\n\nconst loadqnaboardList = (productNum, size, page) => {\n  const formdata = new FormData();\n  formdata.append('productNum', 5);\n  formdata.append('size', '10');\n  formdata.append('page', '1');\n  return {\n    type: ActionTypes.LOAD_QNABOARDLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/product',\n        data: formdata\n      }\n    }\n  };\n}; // 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\n// const addCart = (item) => ({\n//   type: ActionTypes.ADD_CART,\n//   item\n// });\n// 0814 장바구니 추가 (user)\n// userNum,\n\n\nconst addCart = cartModel => {\n  // console.log (\"userNum 넘어옴?? >>>> \", userNum)\n  console.log(\"cartModel 넘어옴?? >>>> \", cartModel);\n  return {\n    type: ActionTypes.ADD_CART,\n    payload: {\n      request: {\n        method: 'POST',\n        url: \"/cart/add\",\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(cartModel)\n      }\n    }\n  };\n}; // 0814 장바구니 불러오기 (user)\n\n\nconst getCartByUser = userNum => {\n  return {\n    type: ActionTypes.GET_CART,\n    payload: {\n      request: {\n        method: 'POST',\n        url: \"/cart?userNum=\".concat(userNum)\n      }\n    }\n  };\n}; // 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \n// const loadProductList = () => {\n//   console.log('loadProductList')\n//   return ({\n//     type: ActionTypes.LOAD_PRODUCTLIST,\n//     payload: {\n//       request: {\n//         method: 'POST',\n//         url: `/product/all`\n//       }\n//     }\n//   })\n// };\n// 0819 loadProductList 변경\n\n\nconst loadProductList = (type, id) => {\n  const formData = new FormData();\n  let url = '/product/all';\n\n  if (type === 'lower') {\n    url = '/product/lower';\n    console.log(\"lower id in action>>>\", id);\n    formData.append('lower', id);\n  } else if (type === 'search') {\n    url = '/product/search';\n    formData.append('search', id);\n  }\n\n  return {\n    type: ActionTypes.LOAD_PRODUCTLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: url,\n        data: formData\n      }\n    }\n  };\n}; // 카테고리 DB에서 가져오는 action 추가 \n\n\nconst getCategories = () => {\n  return {\n    type: ActionTypes.GET_CATEGORIES,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/category'\n      }\n    }\n  };\n};\n\nexport const Actions = {\n  login,\n  signup,\n  getClientToken,\n  logout,\n  getUserMe,\n  loadqnaboardList,\n  writeQnABoard,\n  addCart,\n  loadProductList,\n  getCategories,\n  getCartByUser,\n  writeQnABoard\n};","map":{"version":3,"sources":["D:\\Project\\SuperFarmClientTemp\\SuperFarmClient\\src\\actions\\index.js"],"names":["ActionTypes","getClientToken","formData","FormData","append","console","log","type","GET_TOKEN","payload","request","method","url","data","signup","signupCustomer","SIGNUP","headers","JSON","stringify","login","customerId","password","LOGIN","getUserMe","GET_USERME","logout","LOGOUT","writeQnABoard","writeQnA","WRITE_QNABOARD","loadqnaboardList","productNum","size","page","formdata","LOAD_QNABOARDLIST","addCart","cartModel","ADD_CART","getCartByUser","userNum","GET_CART","loadProductList","id","LOAD_PRODUCTLIST","getCategories","GET_CATEGORIES","Actions"],"mappings":"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","sourcesContent":["import { ActionTypes } from '../contants';\n// React 컴포넌트같은 것이 직접 접근하려고 하면 안됨.\n// 직접 접근하기 위해 \"Action\"이라는 의식을 거쳐야 한다.\n// 1)_ Store에 대해 뭔가 하고 싶은 경우엔 Action 을 발행한다.\n// 2)_ Store의 문지기(Reducer)가 Action의 발생을 감지하면, 새로운 State가 생성된다.\n\n\n// type: \"액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼\"\n// payload: \"액션의 실행에 필요한 임의의 데이터\"\nconst getClientToken = () => {\n  const formData = new FormData();\n  formData.append('grant_type', 'client_credentials');\n  console.log('Actions의 getClientToken 발급 받는다. ');\n  return ({\n    type: ActionTypes.GET_TOKEN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  });\n};\n\nconst signup = (signupCustomer) => {\n  console.log(signupCustomer, ' 여기는 signup 안쪽')\n\n  return ({\n    type: ActionTypes.SIGNUP,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/signup',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(signupCustomer)\n      }\n    }\n  }\n  );\n};\n\nconst login = (customerId, password) => {\n  const formData = new FormData();\n  formData.append('grant_type', 'password');\n  formData.append('username', customerId);\n  formData.append('password', password);\n  console.log(customerId, 'ID ', password, ' Password')\n  return ({\n    type: ActionTypes.LOGIN,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/oauth/token',\n        data: formData\n      }\n    }\n  });\n};\n\nconst getUserMe = () => {\n  return ({\n    type: ActionTypes.GET_USERME,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/users/me'\n        \n      }\n    }\n  });\n};\n\nconst logout = () => ({\n  type: ActionTypes.LOGOUT\n})\n\nconst writeQnABoard = (writeQnA) => {\n  console.log('writeQnABoard')\n  return ({\n    type: ActionTypes.WRITE_QNABOARD,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/write/question',\n        headers: {\n          'Content-Type': 'application/json; charset: utf-8'\n        },\n        data: JSON.stringify(writeQnA)\n      }\n    }\n  })\n}\n\nconst loadqnaboardList = (productNum, size, page) => {\n  const formdata = new FormData();\n  formdata.append('productNum', 5);\n  formdata.append('size', '10');\n  formdata.append('page', '1');\n  return ({\n    type: ActionTypes.LOAD_QNABOARDLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: '/question/product',\n        data: formdata\n      }\n    }\n  })\n}\n\n\n// 0810 장바구니 추가 action (local storage에 저장, db에는 저장 안함)\n// const addCart = (item) => ({\n//   type: ActionTypes.ADD_CART,\n//   item\n// });\n\n// 0814 장바구니 추가 (user)\n// userNum,\nconst addCart = ( cartModel  ) => {\n  // console.log (\"userNum 넘어옴?? >>>> \", userNum)\n   console.log (\"cartModel 넘어옴?? >>>> \",cartModel)\n\n\n  return ({\n    type: ActionTypes.ADD_CART,\n    payload: {\n    request: {\n      method : 'POST',\n      url: `/cart/add`,\n      headers: {\n        'Content-Type': 'application/json; charset: utf-8'\n      },\n      data: JSON.stringify(cartModel)\n    }\n    }\n  })\n\n};\n\n// 0814 장바구니 불러오기 (user)\nconst getCartByUser = (userNum)=> {\n  return ({\n    type: ActionTypes.GET_CART,\n    payload: {\n      request: {\n        method : 'POST',\n        url: `/cart?userNum=${userNum}`,\n      }\n    }\n  })\n}\n\n// 0810 DB에 있는 상품 데이터 가져오는 action => axios 타입 action으로 변경 \n// const loadProductList = () => {\n//   console.log('loadProductList')\n//   return ({\n//     type: ActionTypes.LOAD_PRODUCTLIST,\n//     payload: {\n//       request: {\n//         method: 'POST',\n//         url: `/product/all`\n//       }\n//     }\n//   })\n// };\n\n// 0819 loadProductList 변경\nconst loadProductList = (type, id) => {\n  const formData = new FormData();\n  let url = '/product/all'\n  if (type === 'lower') {\n      url = '/product/lower';\n      console.log(\"lower id in action>>>\", id);\n      formData.append('lower', id);\n  } else if (type === 'search') {\n      url = '/product/search'\n      formData.append('search', id)\n  }\n  \n  return ({\n    type: ActionTypes.LOAD_PRODUCTLIST,\n    payload: {\n      request: {\n        method: 'POST',\n        url: url,\n        data: formData\n      },\n    }\n  })\n};\n\n\n\n// 카테고리 DB에서 가져오는 action 추가 \nconst getCategories = ()=> {\n  return ({\n    type: ActionTypes.GET_CATEGORIES,\n    payload: {\n      request: {\n        method : 'POST',\n        url: '/category'\n      }\n    }\n  })\n}\n\n\nexport const Actions = {\n  login,\n  signup,\n  getClientToken,\n  logout,\n  getUserMe,\n  loadqnaboardList,\n  writeQnABoard,\n  addCart,\n  loadProductList,\n  getCategories,\n  getCartByUser,\n  writeQnABoard\n};"]},"metadata":{},"sourceType":"module"}